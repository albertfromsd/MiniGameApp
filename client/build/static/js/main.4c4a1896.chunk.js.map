{"version":3,"sources":["views/LoginReg.module.css","views/Views.module.css","assets/images/game (1).gif","assets/images/game (2).gif","assets/images/game (3).gif","views/LoginReg.js","components/CustomisedButton.js","components/NavBar.js","components/Scoreboard.js","components/games/GameSelector.js","components/chat/Chat.js","components/games/MathHead.js","components/games/WiseToMemorize.js","components/games/TypeFasterMaster.js","components/games/LittleBoxes.js","components/games/DontComeInsideMe.js","components/games/DropAFatShot.js","views/GameRoom.js","views/Lobby.js","MiniGameApp.js","serviceWorker.js","index.js","components/loginreg/Form.module.css","components/GlobalComponents.module.css","components/games/Games.module.css","components/chat/Chat.module.css"],"names":["module","exports","LoginReg","connect","state","socket","userName","userScore","roomName","dispatch","Button","variant","onClick","event","emit","navigate","gameName","Navbar","bg","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","NavDropdown","title","Item","e","console","log","Divider","useState","userList","setUserList","scoreList","setScoreList","setScoreboard","useEffect","on","data","scoreboardList","sbStyles","flexRowCen","textWhite","join","Table","striped","bordered","hover","sbUser","map","user","i","key","cellWidth","sbScore","score","systemMsg","setSystemMsg","gameSelector","target","value","type","styles","flexColCen","onlyDiv","style","color","gameBtn","chatLog","setChatLog","userInput","setUserInput","chatStyles","chatBox","message","sentMessage","msg","recievedMessage","toLocaleUpperCase","onSubmit","preventDefault","now","Date","timestamp","placeholder","onChange","length","formVisibility","setFormVisibility","resultsVisibility","setResultsVisibility","difficulty","setDifficulty","question","setQuestion","answer","setAnswer","resultMsg","setResultMsg","resultColor","setResultColor","timer","setTimer","totalTime","setTotalTime","socketId","createdAt","totalTimeTaken","changeDifficulty","entirePage","d","name","activeBtn","inactiveBtn","questionTime","getTime","max","min","maxOp","minOp","operators","getRandomInt","maxNum","minNum","Math","floor","random","result","num1","num2","operator","generateProblem","createBtn","hiddenForm","visibleForm","answerTime","round","points","randomWords","require","string","setString","targetString","toString","substring","getSeconds","onPaste","backgroundColor","io","disconnect","top","big","contentRow","gameStyles","gameComponent","path","uName","rName","rPassword","formState","setFormState","errorMsg","setErrorMsg","onChangeHandler","Carousel","height","src","textRed","inputRow","buttonRow","prettyBtn","Boolean","window","location","hostname","match","store","createStore","action","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.4c4a1896.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"entirePage\":\"LoginReg_entirePage__P2JZ4\",\"loginReg\":\"LoginReg_loginReg__10UXJ\",\"hidden\":\"LoginReg_hidden__3RBYY\",\"regform\":\"LoginReg_regform__3eaAa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"flexColCen\":\"Views_flexColCen__lIGZz\",\"flexRowCen\":\"Views_flexRowCen__3NO-q\",\"contentRow\":\"Views_contentRow__-gBcm\",\"onlyDiv\":\"Views_onlyDiv__2qbIE\",\"textWhite\":\"Views_textWhite__1c2bX\",\"textRed\":\"Views_textRed__2dXHn\",\"btn\":\"Views_btn__Ceqzt\",\"buttonMsg\":\"Views_buttonMsg__1it2P\",\"focus\":\"Views_focus__2K86u\",\"activeBtn\":\"Views_activeBtn__25a12\",\"inactiveBtn\":\"Views_inactiveBtn__3zHXU\",\"prettyBtn\":\"Views_prettyBtn__14e9Z\",\"inputRow\":\"Views_inputRow__GxJmG\",\"buttonRow\":\"Views_buttonRow__cTs-p\"};","module.exports = __webpack_public_path__ + \"static/media/game (1).87e5da07.gif\";","module.exports = __webpack_public_path__ + \"static/media/game (2).50a2c1df.gif\";","module.exports = __webpack_public_path__ + \"static/media/game (3).7682298c.gif\";","import React, { useState, useEffect } from 'react';\nimport { Link, Router, Redirect } from '@reach/router';\n\nimport styles from './LoginReg.module.css';\n\nimport FormLogin from '../components/loginreg/FormLogin';\nimport FormReg from '../components/loginreg/FormReg';\n\n\n\nfunction LoginReg() {\n  const [ formVisibilityState, setFormVisibilityState ] = useState(\"loginForm\");\n\n  const toggleFormVisibility = e => {\n    if(formVisibilityState === \"loginForm\") {\n      setFormVisibilityState(\"regForm\");\n    } else {\n      setFormVisibilityState(\"loginForm\");\n    };\n  };\n\n  return (\n    <>\n    <div className={styles.entirePage}>\n      <h1>Welcome to Mini Game App!</h1><br/>\n      <FormLogin formVisibility={formVisibilityState}/>\n      <FormReg formVisibility={formVisibilityState}/>\n      <br/>\n      <button onClick={toggleFormVisibility}>\n        {formVisibilityState === \"loginForm\" \n          ? \"Register\"\n          : \"Login\"}\n      </button><br/>\n    </div>\n    {/* [END] div App */}\n    </>\n  );\n}\n\nexport default LoginReg;\n","import React from 'react';\r\nimport { navigate } from '@reach/router';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst CustomisedButton = ({ socket, roomName, dispatch }) => {\r\n\r\n    const exitParty = event =>{\r\n        socket.emit('disconnect');\r\n        navigate('/');\r\n\r\n    }\r\n\r\n    const exitThisGame = event =>{\r\n        let gameName=\"\";\r\n        socket.emit(\"navigateParty\",\r\n            {\r\n                roomName,\r\n                gameName\r\n            }\r\n\r\n        )\r\n\r\n    }\r\n    \r\n    return (\r\n        <>        \r\n        <Button variant=\"outline-secondary\" onClick={exitParty}>Go to Lobby</Button>\r\n        <Button variant=\"outline-secondary\" onClick={exitThisGame}>Go to Game Room</Button>\r\n        </>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        socket: state.socket,\r\n        userName: state.userName,\r\n        userScore: state.userScore\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(CustomisedButton);","import React, { useEffect } from 'react';\r\nimport { navigate, Link } from '@reach/router';\r\nimport { connect, useSelector } from 'react-redux';\r\n\r\nimport CustomisedButton from './CustomisedButton';\r\n\r\nimport navBarStyles from './GlobalComponents.module.css';\r\n\r\n//[ BOOTSTRAP ]\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nconst NavBar = ({ socket, roomName, dispatch }) => {\r\n\r\n    const navLink = (e, gameName) => {\r\n        console.log(gameName);\r\n        navigate('/'+roomName+\"/\"+gameName);\r\n    };\r\n\r\n    const navigateLobby = e => {\r\n        socket.emit(\"navigateParty\", \r\n            {\r\n                roomName,\r\n                gameName: \"\"\r\n            }\r\n        );\r\n    };\r\n\r\n    const exitParty = event =>{\r\n        console.log(\"Socket should disconnect\");\r\n        socket.emit('disconnect');\r\n        navigate('/');\r\n\r\n    }\r\n    \r\n\r\n    return (\r\n        <>\r\n            <Navbar bg=\"secondary\" variant=\"dark\">\r\n            <Navbar.Brand href={`/${roomName}`}>MiniGame Party</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                <Nav.Link href=\"#\">Home</Nav.Link>\r\n                <Nav.Link href=\"#link\">Link</Nav.Link>\r\n                <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\r\n                    <NavDropdown.Item onClick={navLink}>Math Head</NavDropdown.Item>\r\n                    <NavDropdown.Item href={`/${roomName}/typefaster`}>Type faster</NavDropdown.Item>\r\n                    <NavDropdown.Item href={`/${roomName}/`}>Wise To Memorise</NavDropdown.Item>\r\n                    <NavDropdown.Divider />\r\n                    <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n                </NavDropdown>\r\n                </Nav>\r\n                <CustomisedButton roomName={roomName}/>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n        </>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        socket: state.socket,\r\n        userName: state.userName,\r\n        userScore: state.userScore\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(NavBar);","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n// [ STYLING ]\r\nimport sbStyles from './GlobalComponents.module.css';\r\n\r\n//[ BOOTSTRAP ]\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nconst Scoreboard = ({ socket, userName, roomName, dispatch }) => {\r\n    const [ userList, setUserList ] = useState([]);\r\n    const [ scoreList, setScoreList ] = useState([]);\r\n    const [ scoreboard, setScoreboard ] = useState([]);\r\n\r\n\r\n    useEffect( () => {\r\n        socket.emit(\"scoreboardUpdate\", \r\n            { \r\n                userName,\r\n                roomName,\r\n            }\r\n        );\r\n\r\n        socket.on(\"refreshScoreboard\", data => {\r\n            setScoreboard(data.scoreboardList);\r\n            setUserList(data.userList);\r\n            setScoreList(data.scoreList);\r\n        });\r\n\r\n    }, [socket, roomName, userName]);\r\n\r\n    return (\r\n        <>\r\n\r\n        <div className={[sbStyles.flexRowCen, sbStyles.textWhite].join(' ')}>\r\n        <Table striped bordered hover variant=\"dark\">\r\n        <tbody>\r\n                    <tr className={sbStyles.sbUser}>\r\n                        { userList.map( (user, i) =>\r\n                            <td key={i} className={sbStyles.cellWidth}>{user}</td>\r\n                        )}\r\n                    </tr>\r\n                    <tr className={sbStyles.sbScore}>\r\n                    { scoreList.map( (score, i) =>\r\n                            <td key={i}>{score} </td>\r\n                        )}\r\n                    </tr>\r\n                </tbody>\r\n        </Table>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        socket: state.socket,\r\n        userName: state.userName,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Scoreboard);\r\n\r\n","import React, {useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport styles from './Games.module.css';\r\n\r\nconst GameSelector = ({ socket, dispatch, userName, roomName }) => {\r\n    const [ systemMsg, setSystemMsg ] = useState(\"\");\r\n    let gameName;\r\n\r\n    useEffect( () => {\r\n        socket.on(\"fullParty\", data => {\r\n            setSystemMsg(data);\r\n        });\r\n\r\n    }, [socket]);\r\n\r\n    const gameSelector = e => {\r\n        gameName = e.target.value;\r\n\r\n        dispatch({\r\n            type: 'SETGAMENAME',\r\n            gameName,\r\n        });\r\n\r\n        dispatch({\r\n            type: 'SETROOMNAME',\r\n            gameName,\r\n        });\r\n\r\n        socket.emit(\"navigateParty\", \r\n            {\r\n                roomName,\r\n                gameName\r\n            }\r\n        );\r\n    };\r\n\r\n    return (\r\n        <>\r\n        <div className={[styles.flexColCen, styles.textWhite, styles.onlyDiv].join(' ')}>\r\n            <div className={styles.flexColCen}>\r\n                <h2 className={styles.textWhite}>Welcome, {userName}!</h2>\r\n                <h3 className={styles.textWhite}>You are in Room: {roomName}</h3>\r\n                    <br/>\r\n                <h3 className={styles.textWhite}>Pick a game below:</h3>\r\n                    <br/>\r\n                <p style={{color: \"red\"}}>{systemMsg}</p>\r\n                <div className={styles.flexRowCen}>\r\n                    <div className={styles.flexColCen}>\r\n                        <button \r\n                            onClick={gameSelector} \r\n                            value=\"mathhead\"\r\n                            className={styles.gameBtn}>\r\n                                Math Head\r\n                        </button>{\" \"}\r\n                        <br/>\r\n                            <button \r\n                            onClick={gameSelector} \r\n                            value=\"wisetomemorize\"\r\n                            className={styles.gameBtn}>\r\n                                Wise to Memorize\r\n                        </button>{\" \"}\r\n                            <br/>\r\n                        <button \r\n                        onClick={gameSelector} \r\n                        value=\"dontcomeinsideme\"\r\n                        className={styles.gameBtn}>\r\n                            Don't Come Inside Me\r\n                        </button>{\" \"}\r\n                            <br/>\r\n                    </div>\r\n                    <div className={styles.flexColCen}>\r\n                        <button \r\n                            onClick={gameSelector} \r\n                            value=\"typefastermaster\"\r\n                            className={styles.gameBtn}>\r\n                                Type Faster Master\r\n                        </button>{\" \"}\r\n                            <br/>\r\n                        <button \r\n                            onClick={gameSelector} \r\n                            value=\"littleboxes\"\r\n                            className={styles.gameBtn}>\r\n                                Little Boxes\r\n                        </button>{\" \"}\r\n                            <br/>\r\n                        <button \r\n                            onClick={gameSelector} \r\n                            value=\"dropafatshot\"\r\n                            className={styles.gameBtn}>\r\n                                Drop a Fat Shot\r\n                        </button>{\" \"}\r\n                            <br/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        socket: state.socket,\r\n        gameName: state.gameName,\r\n        userName: state.userName,\r\n        userScore: state.userScore\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(GameSelector);","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport chatStyles from './Chat.module.css';\r\n\r\nconst Chat = ( { socket, userName, roomName } ) => {\r\n  const [ chatLog, setChatLog ] = useState([]);\r\n  const [ userInput, setUserInput ] = useState(\"\");\r\n\r\n  useEffect( () => {\r\n    socket.on('updateChatLog', data => {\r\n      setChatLog(data);\r\n    });\r\n\r\n  }, [socket, roomName]);\r\n\r\n  const sendMsg = e => {\r\n    e.preventDefault();\r\n    let now = new Date();\r\n\r\n    socket.emit(\"newMsg\", \r\n      {\r\n        roomName,\r\n        userName,\r\n        userInput,\r\n        timestamp: now,\r\n      }  \r\n    );\r\n    setUserInput(\"\");\r\n  }\r\n\r\n  return (\r\n    <div style={{'height' : '60%'}}>\r\n      <div className={chatStyles.chatBox}>\r\n        { chatLog.map( (message, i) =>\r\n          message.userName === userName\r\n          ? <div key={i} className={chatStyles.sentMessage}>\r\n              <p style={{'backgroundColor' : 'royalblue'}}> {message.msg} </p>\r\n            </div>\r\n          : <div key={i} className={chatStyles.recievedMessage}>\r\n            <p style={{'backgroundColor' : 'silver'}}> {message.userName.toLocaleUpperCase()} : {message.msg}</p>\r\n            </div>\r\n        )}\r\n      </div>\r\n      <form onSubmit={sendMsg}>\r\n        <input type=\"text\"\r\n          placeholder=\"Type message here\"\r\n          value={userInput}\r\n          onChange={e=>setUserInput(e.target.value)}/>\r\n          <input type=\"submit\" value=\"Send\"/>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n      socket: state.socket,\r\n      userName: state.userName,\r\n      roomName: state.roomName,\r\n      userScore: state.userScore,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Chat);","import React, { useState, useEffect } from 'react';\r\nimport { navigate } from '@reach/router';\r\nimport { connect } from 'react-redux';\r\n\r\nimport styles from './Games.module.css';\r\n\r\nimport  CustomisedButton from '../CustomisedButton';\r\n\r\nconst MathHead = ({ socket, userName, roomName, userScore }) => {\r\n    const gameName = \"mathhead\";\r\n    // validation check to make sure username is not blank/null\r\n    if (userName == null || userName.length < 1 ) {\r\n        navigate('/');\r\n    };\r\n\r\n    // ELEMENT VISIBILITY\r\n    const [ formVisibility, setFormVisibility ] = useState(\"hidden\");\r\n    const [ resultsVisibility, setResultsVisibility ] = useState(\"hidden\");\r\n\r\n    // CREATING QUESTION AND ANSWER\r\n    const [ difficulty, setDifficulty ] = useState(\"Easy\");\r\n    const [ question, setQuestion ] = useState();\r\n    const [ answer, setAnswer ] = useState();\r\n\r\n    // POST ANSWER SUBMISSION\r\n    const [ userInput, setUserInput ] = useState(\"\");\r\n    const [ resultMsg, setResultMsg ] = useState([]);\r\n    const [ resultColor, setResultColor ] = useState(\"white\");\r\n\r\n    // ANSWER TIMER\r\n    const [timer, setTimer] = useState(\"\");\r\n    const [totalTime, setTotalTime] = useState(0);\r\n\r\n\r\n    useEffect( () => {\r\n        socket.emit( 'mathHeadEntered', \r\n            {\r\n                socketId: socket.id,\r\n                userName,\r\n                roomName,\r\n                totalTime,\r\n                \"gameName\": \"mathhead\", \r\n            }\r\n        );\r\n\r\n        socket.on(\"syncNewUser\", data => {\r\n            navigate(\"/\"+roomName+\"/\"+data);\r\n        });\r\n\r\n        socket.on(\"sharedMathHeadTarget\", data => {\r\n            setFormVisibility(\"visible\");\r\n            setResultsVisibility(\"hidden\");\r\n            setQuestion(data.question);\r\n            setAnswer(data.answer);\r\n            setTimer(data.createdAt);\r\n        });\r\n\r\n        socket.on(\"answeredMathHeadTarget\", data => {\r\n            setFormVisibility(\"hidden\");\r\n            setResultsVisibility(\"visible\");\r\n            setResultMsg([\r\n                data.userName+\" beat you! \", \r\n                data.question+\" equals \"+data.answer+\"!\", \"It took that player \"+data.totalTimeTaken+\" seconds to beat you!\", \r\n                \"You can get it next time!\"]);\r\n            setResultColor(\"orange\");\r\n        });\r\n\r\n    }, [socket, roomName, userName, gameName, userScore]);\r\n    \r\n    // Change difficulty\r\n    const difficultyLevels = [\"Easy\", \"Medium\", \"Hard\", \"Genius\"];\r\n    const changeDifficulty = event => {\r\n        setDifficulty(event.target.value);\r\n    };\r\n\r\n    // [ TOP ] Create question and use sockets to share with all players\r\n    const createTarget = (e) => {\r\n        // Start timer\r\n        let now = new Date();\r\n        let questionTime = now.getTime();\r\n        setTimer(questionTime);\r\n        setTotalTime(0);\r\n\r\n        setResultMsg([]);\r\n        setFormVisibility(\"visible\");\r\n\r\n        const operators = [ \"+\", \"-\", \"×\"];\r\n\r\n        const getRandomInt = (maxNum, minNum) => {\r\n            let num = Math.floor(Math.random() * (maxNum - minNum) + minNum );\r\n            return num;\r\n        }; // [END] subfunction getRandomInt\r\n\r\n        let max;\r\n        let min;\r\n        let maxOp;\r\n        let minOp;\r\n        const generateProblem = (max, min, maxOp, minOp) => {\r\n            const num1 = getRandomInt(max, min);\r\n            const num2 = getRandomInt(max, min);\r\n            const operator = operators[getRandomInt(maxOp, minOp)];\r\n            let result;\r\n            if (operator == \"+\") {\r\n                result = num1+num2;\r\n            };\r\n            if (operator == \"-\") {\r\n                result = num1-num2;\r\n            };\r\n            if (operator == \"×\") {\r\n                result = num1*num2;\r\n            };\r\n\r\n            socket.emit(\"mathHeadTargetGenerated\", \r\n                {\r\n                    question: (num1+\" \"+operator+\" \"+num2),\r\n                    answer: result,\r\n                    createdAt: questionTime\r\n                });\r\n        }; // [END] sub-function generateProblem\r\n\r\n        // Question changes based on difficulty\r\n\r\n        if (difficulty == \"Easy\") {\r\n            max = 21;\r\n            min = 2;\r\n            maxOp = 2;\r\n            minOp = 0;\r\n        };\r\n        if (difficulty == \"Medium\") {\r\n            max = 52;\r\n            min = 5;\r\n            maxOp = 3;\r\n            minOp = 0;\r\n        };\r\n        if (difficulty == \"Hard\") {\r\n            max = 102;\r\n            min = 11;\r\n            maxOp = 3;\r\n            minOp = 0;\r\n        };\r\n        if (difficulty == \"Genius\") {\r\n            max = 1002;\r\n            min = 11;\r\n            maxOp = 3;\r\n            minOp = 0;\r\n        } else {\r\n            setDifficulty(\"Easy\");\r\n        };\r\n        generateProblem(max, min, maxOp, minOp);\r\n    };\r\n    // [ END ] Create question and use sockets to share will players\r\n\r\n    const findResult = (event) => {\r\n        event.preventDefault();\r\n\r\n        if ( userInput == answer ) {\r\n            // time and score\r\n            let now = new Date();\r\n            let answerTime = now.getTime();\r\n            let totalTimeTaken = Math.round((+answerTime - + timer))/1000;\r\n            let points = 15-totalTimeTaken;\r\n\r\n            // if ( difficulty == \"Easy\") {\r\n            //     points = 10-totalTimeTaken;\r\n            // };\r\n            // if ( difficulty == \"Medium\") {\r\n            //     points = 15-totalTimeTaken;\r\n            // };\r\n            // if ( difficulty == \"Hard\") {\r\n            //     points = 20-totalTimeTaken;\r\n            // };\r\n            // if ( difficulty == \"Genius\") {\r\n            //     points = 40-totalTimeTaken;\r\n            // };\r\n\r\n            console.log(\"points: \"+points);\r\n            setTimer(\"\");\r\n            \r\n            // results\r\n            setResultMsg([\r\n                \"🏆🏆 You got it! 🏆🏆\",\r\n                question+\" does equal \"+userInput+\"!\", \r\n                \"You scored \"+points+\" points!\",\r\n                \"It took you \"+totalTimeTaken+\" seconds\",]);\r\n            setResultColor(\"green\");\r\n\r\n            // RESET FORM\r\n            setUserInput(\"\");\r\n            setFormVisibility(\"hidden\");\r\n            \r\n            // [ SOCKET ] emit after answered correctly\r\n            socket.emit(\"mathHeadTargetAnswered\", \r\n                {\r\n                    socketId: socket.id,\r\n                    userName,\r\n                    roomName,\r\n                    question,\r\n                    answer,\r\n                    totalTimeTaken,\r\n                    points\r\n                }\r\n            );\r\n        // wrong answer submitted; set wrong msg and no emit\r\n        } else {\r\n            setResultMsg([\r\n                \"WRONG!\", \r\n                question + \" does not equal \"+userInput+\"!\"]);\r\n            setResultColor(\"red\");\r\n        };\r\n        setUserInput(\"\");\r\n        setResultsVisibility(\"visible\");\r\n    }; // [END] of function findResult\r\n\r\n    return(\r\n        <>\r\n        <div className={styles.entirePage}>\r\n            <h2 className={styles.textWhite}>Math Head</h2>\r\n                <br/>\r\n            <div>\r\n                {difficultyLevels.map( (d, i) => {\r\n\r\n                    return (\r\n                        <button \r\n                            onClick={changeDifficulty} \r\n                            key={i} \r\n                            name={d} \r\n                            value={d} \r\n                            className={(d == difficulty ? styles.activeBtn : styles.inactiveBtn)}>\r\n                                {d}\r\n                        </button>\r\n                    )\r\n                })}\r\n            </div>\r\n                <br/>\r\n\r\n            <button onClick={createTarget} className={styles.createBtn}>{\"Create \" + difficulty + \" Problem\"}</button>\r\n                <br/>\r\n            <div className={formVisibility == \"hidden\" \r\n                ? styles.hiddenForm \r\n                : styles.visibleForm}>\r\n                    <p className={styles.textWhite}>{question}</p>\r\n                        <br/>\r\n                        <br/>\r\n                        <br/>\r\n                <form onSubmit={findResult}>\r\n                    <input \r\n                        type=\"text\"\r\n                        placeholder=\"Enter you answer here\"\r\n                        value={userInput}\r\n                        onChange={e=>setUserInput(e.target.value)}/>\r\n                    <input type=\"submit\" value=\"Submit\"/>\r\n                </form>\r\n            </div>\r\n                <br/>\r\n            <div className={resultsVisibility == \"hidden\" \r\n                ? styles.hiddenForm \r\n                : styles.visibleForm}>\r\n                {resultMsg.length > 0 && resultMsg.map( (msg, i) => \r\n                    <>\r\n                    <p style={{color: resultColor}} key={i}>{msg}</p>\r\n                        <br/>\r\n                    </>\r\n                )}\r\n            </div>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        socket: state.socket,\r\n        userName: state.userName,\r\n        userScore: state.userScore,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(MathHead);","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport styles from './Games.module.css';\r\n\r\nconst WiseToMemorize = ({ roomName }) => {\r\n\r\n    // generate a random string\r\n    // show the string for about 3-5 secs\r\n    // string will vanish\r\n    // input field will be invisible, not even password status\r\n    // points will be based off time to type it\r\n    // incorrect submissions will get negative points\r\n\r\n    const [ string, setString ] = useState(null);\r\n    const [ formState, setFormState ] = useState(\"\");\r\n\r\n    const generateRandomString = e => {\r\n        // click button to generate random string at a random setTimeout\r\n    };\r\n\r\n    const submitHandler = e => {\r\n        \r\n    };\r\n\r\n    return(\r\n        <>\r\n        <div className={styles.entirePage}>\r\n            <h2 className={styles.textWhite}>Wise to Memorize</h2>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        socket: state.socket,\r\n        userName: state.userName,\r\n        userScore: state.userScore\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(WiseToMemorize);","import React, { useState, useEffect } from 'react';\r\nimport { navigate } from '@reach/router';\r\nimport { connect } from 'react-redux';\r\n\r\n// [ STYLING ]\r\nimport styles from './Games.module.css';\r\n\r\nvar randomWords = require('random-words');\r\n\r\nconst TypeFasterMaster = ({  socket, userName, roomName, userScore })  => {\r\n    const gameName = \"typefastermaster\";\r\n\r\n    if ( userName == null || userName.length < 1 ) {\r\n        navigate('/')\r\n    };\r\n\r\n    // ELEMENT VISIBILITY\r\n    const [ formVisibility, setFormVisibility ] = useState(\"hidden\");\r\n    const [ resultsVisibility, setResultsVisibility ] = useState(\"hidden\");\r\n\r\n    // CREATING QUESTION(string) AND ANSWER(userInput)\r\n    const [ difficulty, setDifficulty ] = useState(\"Easy\")\r\n    const [ string, setString ] = useState(\"\");\r\n    const [ userInput, setUserInput ] = useState(\"\");\r\n\r\n    // POST ANSWER SUBMISSION\r\n    const [ message, setMessage ] = useState(\"\");\r\n    const [ resultMsg, setResultMsg ] = useState([]);\r\n    const [ resultColor, setResultColor ] = useState(\"white\");\r\n\r\n    // ANSWER TIMER\r\n    const [ timer, setTimer ] = useState(\"\");\r\n    const [ totalTime, setTotalTime ] = useState(0);\r\n\r\n    useEffect( () => {\r\n        socket.emit('typeFasterEntered', {\r\n            socketId: socket.id,\r\n            userName,\r\n            roomName,\r\n            totalTime,\r\n            gameName : \"typefastermaster\"\r\n        });\r\n        \r\n        socket.on(\"syncNewUser\", data => {\r\n            navigate(\"/\"+roomName+\"/\"+data);\r\n        });\r\n\r\n        socket.on(\"sharedTypeFasterTarget\", data => {\r\n            console.log(\"sharedTypeFasterTarget activated:\"+data.target);\r\n            setFormVisibility(\"visible\");\r\n            setResultsVisibility(\"hidden\");\r\n            setString(data.target);\r\n            setTimer(data.createdAt);\r\n        });\r\n\r\n        socket.on(\"answeredTypeFasterTarget\", data => {\r\n            console.log(\"Data from typeFaster client: \"+data.userName);\r\n            setFormVisibility(\"hidden\");\r\n            setResultsVisibility(\"visible\");\r\n            setResultMsg([\r\n                data.userName+\" wins! \", \r\n                \"It took that player \" +data.totalTimeTaken + \" seconds.\",\r\n                \"They scored \"+data.points+\" points!\", \r\n                \"You can get it next time!\"]);\r\n            setResultColor(\"orange\");\r\n        });\r\n        \r\n    }, [socket, roomName, userName]);\r\n\r\n    // Set difficulty\r\n    const difficultyLevels = [\"Easy\", \"Medium\", \"Hard\", \"Genius\"];\r\n    const changeDifficulty = event =>{\r\n        setDifficulty(event.target.value);\r\n    };\r\n\r\n    // Create Target String\r\n    const createTarget = () => {\r\n\r\n        let now = new Date();\r\n        let questionTime = now.getTime();\r\n        setTimer(questionTime);\r\n        setTotalTime(0);\r\n\r\n        setResultMsg([]);\r\n        setFormVisibility(\"visible\");\r\n\r\n        let targetString;\r\n        if (difficulty === \"Easy\"){\r\n            targetString = randomWords(2);\r\n        };\r\n        if (difficulty == \"Medium\"){\r\n            targetString = randomWords(4);\r\n        };\r\n        if (difficulty == \"Hard\"){\r\n            targetString = randomWords(6);\r\n        };\r\n        if (difficulty == \"Genius\"){\r\n            //join used to remove the comma between the words that is being created by randomWords()\r\n            targetString = Math.random().toString(36).substring(2, 20) + randomWords(4).join('');\r\n        };\r\n        console.log(\"stringState: \"+string);\r\n        console.log(\"targetString created: \"+targetString);\r\n\r\n        socket.emit(\"typeFasterTargetGenerated\", \r\n        {\r\n            target: targetString,\r\n            createdAt: questionTime\r\n        });\r\n    };\r\n\r\n    // Answer submission/confirmation\r\n    const findResult = (event) =>{\r\n        event.preventDefault();\r\n\r\n        if ( difficulty == \"Genius\" && userInput == string.join('') ) {\r\n            let now = new Date();\r\n            let answerTime = now.getTime();(now.getSeconds()).toString();\r\n            let totalTimeTaken = Math.round((+answerTime - + timer))/1000;\r\n            let points = 40-((+answerTime - + timer)/1000);\r\n            setTimer(\"\");\r\n    \r\n            setResultMsg([\r\n                \"🏆🏆 You got it! Genius! 🏆🏆\",\r\n                \"You scored \"+points+\" points!\",\r\n                \"It took you \"+totalTimeTaken+\" seconds\"]);\r\n            setResultColor(\"green\");\r\n\r\n            //RESET FORM\r\n            setUserInput(\"\");\r\n            setFormVisibility(\"hidden\");\r\n\r\n            socket.emit(\"typeFasterTargetAnswered\", \r\n                {\r\n                    socketId: socket.id,\r\n                    userName,\r\n                    roomName,\r\n                    string,\r\n                    totalTimeTaken,\r\n                    points\r\n                }\r\n            );\r\n        };\r\n        \r\n        if ( difficulty != \"Genius\" && userInput == string.join('') ){\r\n            let now = new Date();\r\n            let answerTime = now.getTime();\r\n            let totalTimeTaken = Math.round((+answerTime - + timer))/1000;\r\n            let points = 20-((+answerTime - + timer)/1000);\r\n            setTimer(\"\");\r\n    \r\n            setResultMsg([\r\n                \"🏆🏆 You got it! 🏆🏆\",\r\n                \"You scored \"+points+\" points!\",\r\n                \"It took you \"+totalTimeTaken+\" seconds\"]);\r\n            setResultColor(\"green\");\r\n\r\n            socket.emit(\"typeFasterTargetAnswered\", \r\n                {\r\n                    socketId: socket.id,\r\n                    userName,\r\n                    roomName,\r\n                    string,\r\n                    totalTimeTaken,\r\n                    points\r\n                }\r\n            );\r\n        } else {\r\n            setResultMsg([\r\n                \"WRONG!\", \r\n                \"You had a typo in there!\"\r\n            ]);\r\n            setResultColor(\"red\");\r\n        };\r\n        setUserInput(\"\");\r\n        setResultsVisibility(\"visible\");\r\n    }; // [END] of function findResult\r\n\r\n    return (\r\n        <>\r\n        <div className={styles.entirePage}>\r\n\r\n            <h3 className={styles.textWhite}> <i> {message} {userName}</i>  </h3>\r\n\r\n            <br/>\r\n            <h2  className={styles.textWhite}>Type Faster Master</h2>\r\n                <br />\r\n            <div>\r\n                {difficultyLevels.map( (d, i) => {\r\n\r\n                    return (\r\n                        <button \r\n                            onClick={changeDifficulty} \r\n                            key={i} \r\n                            name={d} \r\n                            value={d} \r\n                            className={(d == difficulty ? styles.activeBtn : styles.inactiveBtn)}>\r\n                            {d}\r\n                        </button>\r\n                    )\r\n                })}\r\n            </div>\r\n                <br/>\r\n\r\n            <button onClick={createTarget} className={styles.createBtn}>{\"Create \" + difficulty + \" Problem\"}</button>\r\n                <br />\r\n            <div className={formVisibility == \"hidden\" \r\n                ? styles.hiddenForm \r\n                : styles.visibleForm}>\r\n                    <p className={styles.textWhite}> {string} </p>\r\n                        <br/>\r\n                        <br/>\r\n                        <br/>\r\n                <form onSubmit = {findResult}>\r\n                    <input \r\n                        type=\"text\" \r\n                        placeholder=\"Type faster here\"\r\n                        value={userInput} \r\n                        onChange= {e => setUserInput(e.target.value)} \r\n                        onPaste = {e=> e.preventDefault()}\r\n                        />\r\n                    <button name=\"submitButton\" style={{backgroundColor: 'pink'}} type=\"submit\">Go!</button>\r\n                </form>  \r\n            </div>\r\n                <br />\r\n            <div className={resultsVisibility == \"hidden\" \r\n                ? styles.hiddenForm \r\n                : styles.visibleForm}>\r\n                {resultMsg.length > 0 && resultMsg.map( (msg, i) => \r\n                    <>\r\n                    <p style={{color: resultColor}} key={i}>{msg}</p>\r\n                        <br/>\r\n                    </>\r\n                )}\r\n            </div>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        socket: state.socket,\r\n        userName: state.userName,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(TypeFasterMaster);","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport styles from './Games.module.css';\n\nconst LittleBoxes = ({ roomName }) => {\n\n    // a series of divs will show up with random bgColors and textColors\n    // at random setTimeouts, prompt will display a div:\n    // \"click on the { color } box\" while textColor and bgColor are random (to confuse brain processing)\n    // players will have to click on the appropriate div\n    // once a player clicks the right div they get the points\n    // then the next prompt and set of divs will appear\n\n    return (\n        <>\n        <div className={styles.entirePage}>\n            <h2 className={styles.textWhite}> Little Boxes </h2>\n        </div>\n        </>\n    );\n};\n\nfunction mapStateToProps(state) {\n    return {\n        socket: state.socket,\n        userName: state.userName,\n        userScore: state.userScore\n    };\n};\n\nexport default connect(mapStateToProps)(LittleBoxes);","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport styles from './Games.module.css';\n\nconst DontComeInsideMe = ({ roomName }) => {\n\n    // at random setTimeout, prompt will shout \"Come to me!\"\n    // bar will display with a target line towards the end of the bar, with a red forbidden area\n    // aiming bar will move at random speeds\n    // player must click button before the aiming line passes the target line\n    // player who gets closest to the target line without passing into the red area gets the points\n\n    return (\n        <>\n        <div className={styles.entirePage}>\n            <h2 className={styles.textWhite}>Don't Come Inside Me!</h2>\n        </div>\n        </>\n    );\n};\nfunction mapStateToProps(state) {\n    return {\n        socket: state.socket,\n        userName: state.userName,\n        userScore: state.userScore\n    };\n};\n\nexport default connect(mapStateToProps)(DontComeInsideMe);","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport styles from './Games.module.css';\n\nconst DropAFatShot = ({ roomName }) => {\n\n    // have a static target of a specific size\n    // each player gets a turn;\n    // each player clicks and drags a start point and end point, drawing a line\n    // the shot travels in the same line as the one drawn\n    // as the bullet travels across the target, it covers a certain surface area\n    // whosever bullet covers the most surface area is the winner\n\n    return (\n        <>\n        <div className={styles.entirePage}>\n            <h2 className={styles.textWhite}> Drop a Fat Shot </h2>\n        </div>\n        </>\n    );\n};\n\nfunction mapStateToProps(state) {\n    return {\n        socket: state.socket,\n        userName: state.userName,\n        userScore: state.userScore\n    };\n};\n\nexport default connect(mapStateToProps)(DropAFatShot);","import React, { useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { navigate, Router } from '@reach/router';\r\nimport { connect } from 'react-redux';\r\n\r\n// [ COMPONENTS ]\r\nimport NavBar from \"../components/NavBar\";\r\nimport Scoreboard from \"../components/Scoreboard\";\r\nimport GameSelector from \"../components/games/GameSelector\";\r\nimport Chat from '../components/chat/Chat';\r\n\r\n// [ GAMES ]\r\nimport MathHead from '../components/games/MathHead';\r\nimport WiseToMemorize from '../components/games/WiseToMemorize';\r\nimport TypeFasterMaster from '../components/games/TypeFasterMaster';\r\nimport LittleBoxes from '../components/games/LittleBoxes';\r\nimport DontComeInsideMe from '../components/games/DontComeInsideMe';\r\nimport DropAFatShot from '../components/games/DropAFatShot';\r\n\r\n// [ STYLING ]\r\nimport styles from './Views.module.css';\r\nimport gameStyles from '../components/games/Games.module.css';\r\nimport chatStyles from '../components/chat/Chat.module.css';\r\n\r\n//[ Animations ]\r\nimport Fade from 'react-reveal';\r\n\r\nconst GameRoom = ({ dispatch, userName, roomName }) => {\r\n    if (userName == null || userName.length < 1 ) {\r\n        navigate('/');\r\n    };\r\n\r\n    //create socket for port :8000\r\n    // const [ socket ] = useState( () => io(':8000') );\r\n    \r\n    //craete socket for deployed version\r\n    const [ socket ] = useState( () => io('/api') );\r\n\r\n\r\n    const [ scoreboard, setScoreboard ] = useState([]);\r\n\r\n    dispatch({\r\n        type: 'SETSOCKET',\r\n        socket: socket,\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        // socket.emit(\"join room\", {\r\n        //     userName,\r\n        //     roomName\r\n        // })\r\n\r\n        socket.emit(\"enteredGameRoom\", \r\n            {\r\n                socketId: socket.id,\r\n                userName,\r\n                roomName,\r\n                \"gameName\": \"\",\r\n            }\r\n        );\r\n\r\n        socket.on(\"syncNewUser\", data => {\r\n            navigate(\"/\"+roomName+\"/\"+data);\r\n        });\r\n\r\n        socket.emit(\"scoreboardUpdate\", \r\n            { \r\n                userName,\r\n                roomName,\r\n            }\r\n        );\r\n        socket.on(\"refreshScoreboard\", data => {\r\n            setScoreboard(data.scoreboardList);\r\n        });\r\n        \r\n        socket.on(\"partyNavigator\", data => {\r\n            navigate('/'+data.roomName+'/'+data.gameName);\r\n        });\r\n\r\n        return () => {\r\n            socket.disconnect();\r\n        };\r\n    }, [socket, userName, roomName]);\r\n\r\n    return (\r\n        <>\r\n        <Fade top big>\r\n        <NavBar socket={socket} \r\n            roomName={roomName} />\r\n        <Scoreboard socket={socket}\r\n            roomName={roomName}\r\n            userName={userName} />\r\n        <div className={styles.contentRow}>\r\n            <div className={gameStyles.gameComponent}>\r\n                <Router>\r\n                    <GameSelector path=\"/\" \r\n                        socket={socket} />\r\n                    <MathHead path=\"/mathhead\" \r\n                        socket={socket} \r\n                        roomName={roomName} />\r\n                    <TypeFasterMaster path=\"/typefastermaster\" \r\n                        socket={socket} \r\n                        roomName={roomName} />\r\n                    <WiseToMemorize path=\"/wisetomemorize\" \r\n                        socket={socket} \r\n                        roomName={roomName} />\r\n                    <LittleBoxes path=\"/littleboxes\" \r\n                        socket={socket} \r\n                        roomName={roomName} />\r\n                    <DontComeInsideMe path=\"/dontcomeinsideme\" \r\n                        socket={socket} \r\n                        roomName={roomName} />\r\n                    <DropAFatShot path=\"/dropafatshot\" \r\n                        socket={socket} \r\n                        roomName={roomName} />\r\n                </Router>\r\n            </div>\r\n            <>\r\n                <Chat socket={socket} \r\n                    roomName = {roomName} />\r\n            </>\r\n        </div>\r\n        </Fade>\r\n        </>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        socket: state.socket,\r\n        userName: state.userName,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(GameRoom);\r\n\r\n","// [MAIN COMPONENTS]\r\nimport React, { useState } from 'react';\r\nimport { navigate } from '@reach/router';\r\nimport { connect } from 'react-redux';\r\n\r\n// [STYLES]\r\nimport styles from './Views.module.css';\r\n\r\n//[Material -UI]\r\nimport {\r\n    fade,\r\n    ThemeProvider,\r\n    withStyles,\r\n    makeStyles,\r\n    createMuiTheme,\r\n  } from '@material-ui/core/styles';\r\n  import TextField from '@material-ui/core/TextField';\r\n\r\n//[ ANIMATION]\r\nimport {Fade} from 'react-reveal';\r\n\r\n \r\nimport Carousel from 'react-bootstrap/Carousel';\r\n \r\n\r\nconst Lobby = ({ dispatch }) => {\r\n    const [ formState, setFormState ] = useState({\r\n        uName: \"\",\r\n        rName: \"\",\r\n        rPassword: \"\"\r\n    });\r\n    const [ errorMsg, setErrorMsg ] = useState (\"\");\r\n\r\n    const onChangeHandler = e => {\r\n        setFormState({\r\n            ...formState,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n\r\n    const enterRoom = e => {\r\n        e.preventDefault();\r\n        if (formState.uName.length>0 && formState.rName.length>0) {\r\n            dispatch(\r\n                {\r\n                type: 'SETUSERNAME',\r\n                userName: formState.uName,\r\n                }\r\n            );\r\n            dispatch(\r\n                {\r\n                type: 'SETROOMNAME',\r\n                roomName: formState.rName,\r\n                },\r\n            );\r\n            navigate('/'+formState.rName);\r\n        } else {\r\n            setErrorMsg(\"Please enter both a user and room name\");\r\n        };\r\n    }; \r\n\r\n    // in /views/GameRoom.js we will have a list of sockets connected, chatbox, + list of games (later we will add total score for session using state or redux)\r\n\r\n    return (\r\n        <>\r\n        <div className={[styles.textWhite, styles.onlyDiv].join(' ')}>\r\n            <br/>\r\n           <div className={styles.flexColCen}>\r\n           <Carousel>\r\n               <Carousel.Item >\r\n                   <img height=\"420px\" src={require(\"../assets/images/game (1).gif\")}/>\r\n               </Carousel.Item>\r\n               <Carousel.Item>\r\n                   <img height=\"420px\"src={require(\"../assets/images/game (2).gif\")}/>\r\n               </Carousel.Item>\r\n               <Carousel.Item>\r\n                   <img height=\"420px\"src={require(\"../assets/images/game (3).gif\")}/>\r\n               </Carousel.Item>\r\n           </Carousel>\r\n           <br/>\r\n           <br/>\r\n           </div>\r\n\r\n           <div className={[styles.textWhite, styles.onlyDiv, styles.flexColCen].join(' ')}>\r\n           <h1>Join the Party, Join the Fun!</h1>\r\n\r\n                <br/>\r\n            <p className={styles.textRed}>Please enter your desired nick name and room you wish to enter or create</p> \r\n                <br/> <br/>\r\n            <form className={styles.flexColCen} onSubmit={enterRoom}>\r\n\r\n                <p style={{color: \"red\"}}>{errorMsg}</p>\r\n\r\n                <div className={styles.inputRow}>\r\n                    <label>Nick Name: </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"uName\"\r\n                        value={formState.uName}\r\n                        onChange={onChangeHandler} /> \r\n                </div> \r\n                    <br/>\r\n                <div className={styles.inputRow}>\r\n                    <label>Room Name:</label>\r\n                    <input \r\n                        type=\"text\"\r\n                        name=\"rName\"\r\n                        value={formState.rName}\r\n                        onChange={onChangeHandler} /> \r\n                </div> \r\n                    <br/>\r\n                <div className={styles.inputRow}>\r\n                    <label>Password:</label>\r\n                    <input \r\n                        type=\"password\"\r\n                        name=\"rPassword\"\r\n                        value={formState.rPassword}\r\n                        onChange={onChangeHandler} />\r\n                </div> \r\n                    <br/>\r\n                <div className={styles.buttonRow}>\r\n                    <button \r\n                        type=\"submit\" \r\n                        name =\"roomButton\" \r\n                        value=\"enterRoom\" \r\n                        className={styles.prettyBtn}>\r\n                            Enter Room\r\n                    </button>\r\n                    <button \r\n                        type=\"submit\" \r\n                        name =\"roomButton\" \r\n                        value=\"createRoom\" \r\n                        className={styles.prettyBtn}>\r\n                            Create Room\r\n                    </button>\r\n                </div>\r\n            </form>\r\n            </div>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        userName: state.userName,\r\n        userScore: state.userScore,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Lobby);\r\n","import React from 'react';\r\nimport { Router } from '@reach/router';\r\nimport { connect } from 'react-redux';\r\n\r\n// [ STYLES ]\r\nimport './MiniGameApp.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// [ VIEWS ]\r\nimport LoginReg from './views/LoginReg'; // fix later\r\nimport GameRoom from './views/GameRoom';\r\nimport Lobby from './views/Lobby';\r\n\r\n//[BOOtSTRAP]\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction MiniGameApp({ dispatch }) {\r\n\r\n\r\n  return (\r\n    <>\r\n      <Router>\r\n        <Lobby path=\"/\" />\r\n        <GameRoom path=\"/:roomName/*\" />\r\n      </Router>\r\n    </>\r\n  );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n      userName: state.userName,\r\n      userScore: state.userScore,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(MiniGameApp);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport MiniGameApp from './MiniGameApp';\r\n\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\n// [TOP] [ REDUX ]\r\nfunction reducer( state, action ) {\r\n    switch(action.type) {\r\n        case 'SETSOCKET':\r\n            return {\r\n            ...state,\r\n            socket: action.socket\r\n            };\r\n        case 'SETUSERNAME':\r\n            return {\r\n            ...state,\r\n            userName: action.userName,\r\n            };\r\n        case 'SETROOMNAME':\r\n            return {\r\n            ...state,\r\n            roomName: action.roomName,\r\n            };\r\n        case 'SETGAMENAME':\r\n            return{\r\n                ...state,\r\n                gameName : action.gameName,\r\n            }\r\n        case 'CHANGETOTALSCORE':\r\n            return {\r\n            ...state,\r\n            userScore: action.userScore\r\n            };\r\n        case 'LOGOUT':\r\n            return {\r\n                ...state,\r\n                socket: null,\r\n                userName: null,\r\n                userScore: null,\r\n            };\r\n        default:\r\n            return state;\r\n    };\r\n  };\r\n  \r\n  const initialState = {\r\n    socket: null,\r\n    userName: null,\r\n    userScore: null,\r\n    roomName: null,\r\n    gameName : null\r\n  };\r\n  \r\n  const store = createStore( reducer, initialState );\r\n  // [END] [ REDUX ]\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <MiniGameApp />\r\n    </Provider>\r\n    , document.getElementById('minigameapp'));\r\n\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginForm\":\"Form_loginForm__1_hPT\",\"formRow\":\"Form_formRow__2fNxM\",\"rowCenter\":\"Form_rowCenter__3mY1B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"flexRow\":\"GlobalComponents_flexRow__22PMv\",\"flexRowCen\":\"GlobalComponents_flexRowCen__3ykpQ\",\"flexColCen\":\"GlobalComponents_flexColCen__5o5C2\",\"textWhite\":\"GlobalComponents_textWhite__T8vzD\",\"sbUser\":\"GlobalComponents_sbUser__2ZlSN\",\"sbScore\":\"GlobalComponents_sbScore__2OL0S\",\"cellWidth\":\"GlobalComponents_cellWidth__1H58r\",\"navButton\":\"GlobalComponents_navButton__25okk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"entirePage\":\"Games_entirePage__1k91F\",\"flexColCen\":\"Games_flexColCen__2ZTuC\",\"flexRowCen\":\"Games_flexRowCen__1NIEg\",\"onlyDiv\":\"Games_onlyDiv__2LRmW\",\"gameComponent\":\"Games_gameComponent__3YsQw\",\"textRed\":\"Games_textRed__3A1qH\",\"textWhite\":\"Games_textWhite__JhkKf\",\"gameBtn\":\"Games_gameBtn__2hB4U\",\"buttonMsg\":\"Games_buttonMsg__3Yh7S\",\"focus\":\"Games_focus__215gg\",\"activeBtn\":\"Games_activeBtn__2khwC\",\"inactiveBtn\":\"Games_inactiveBtn__5g2Jj\",\"createBtn\":\"Games_createBtn__Apku9\",\"hiddenForm\":\"Games_hiddenForm__1_zOw\",\"visibleForm\":\"Games_visibleForm__1Kx5e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatBox\":\"Chat_chatBox__34E6S\",\"chatLogMsgs\":\"Chat_chatLogMsgs__3rYH9\",\"chatFormBox\":\"Chat_chatFormBox__1U2XZ\",\"inputMsg\":\"Chat_inputMsg__2v_c0\",\"msgLog\":\"Chat_msgLog__2BQ30\",\"message\":\"Chat_message__3n5kJ\",\"recievedMessage\":\"Chat_recievedMessage__PJEtb\",\"sentMessage\":\"Chat_sentMessage__1Imme\",\"container\":\"Chat_container__2QJSA\",\"buttonMsg\":\"Chat_buttonMsg__1jyZc\",\"focus\":\"Chat_focus__1vT98\",\"buttonReset\":\"Chat_buttonReset__IldEq\",\"user\":\"Chat_user__2KxPm\"};"],"sourceRoot":""}