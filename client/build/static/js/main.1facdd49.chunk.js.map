{"version":3,"sources":["views/LoginReg.module.css","views/Views.module.css","assets/images/game (1).gif","assets/images/game (2).gif","assets/images/game (3).gif","views/LoginReg.js","components/CustomizedButton.js","components/NavBar.js","components/Scoreboard.js","components/games/GameSelector.js","components/chat/Chat.js","components/CountdownTimer.js","components/games/MathHead.js","components/games/WiseToMemorize.js","components/games/TypeFasterMaster.js","components/games/LittleBoxes.js","components/games/DontComeInsideMe.js","components/games/DropAFatShot.js","views/GameRoom.js","views/Lobby.js","MiniGameApp.js","serviceWorker.js","index.js","components/loginreg/Form.module.css","components/GlobalComponents.module.css","components/games/Games.module.css","components/chat/Chat.module.css"],"names":["module","exports","LoginReg","connect","state","socket","userName","roomName","dispatch","Button","variant","onClick","event","disconnect","type","navigate","emit","gameName","useEffect","length","undefined","Navbar","bg","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","NavDropdown","title","Item","e","console","log","Divider","useState","userList","setUserList","scoreList","setScoreList","setScoreboard","on","data","scoreboardList","scoreboard","sbStyles","flexRowCen","textWhite","join","Table","striped","bordered","hover","sbUser","map","user","i","key","cellWidth","sbScore","score","systemMsg","setSystemMsg","gameSelector","target","value","styles","flexColCen","onlyDiv","style","color","gameBtn","chatLog","setChatLog","userInput","setUserInput","chatStyles","chatBox","message","sentMessage","msg","recievedMessage","toLocaleUpperCase","onSubmit","preventDefault","now","Date","timestamp","placeholder","onChange","startTime","calculateTimeLeft","timeDifference","timeLeft","days","Math","floor","hours","minutes","seconds","milliseconds","setTimeLeft","setTimeout","timerComponents","Object","keys","forEach","interval","push","formVisibility","setFormVisibility","resultsVisibility","setResultsVisibility","difficulty","setDifficulty","question","setQuestion","answer","setAnswer","resultMsg","setResultMsg","resultColor","setResultColor","timer","setTimer","totalTime","setTotalTime","socketId","createdAt","totalTimeTaken","changeDifficulty","entirePage","d","name","activeBtn","inactiveBtn","questionTime","getTime","max","min","maxOp","minOp","operators","getRandomInt","maxNum","minNum","random","result","num1","num2","operator","generateProblem","createBtn","hiddenForm","visibleForm","answerTime","round","points","userScore","randomWords","require","targetString","setTargetString","string","toString","substring","getSeconds","onPaste","backgroundColor","io","currentGame","top","big","contentRow","gameStyles","gameComponent","path","uName","rName","rPassword","formState","setFormState","errorMsg","setErrorMsg","onChangeHandler","Carousel","height","alt","src","textRed","inputRow","buttonRow","prettyBtn","Boolean","window","location","hostname","match","store","createStore","action","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,WAAa,6BAA6B,SAAW,2BAA2B,OAAS,yBAAyB,QAAU,4B,+ECA9ID,EAAOC,QAAU,CAAC,WAAa,0BAA0B,WAAa,0BAA0B,WAAa,0BAA0B,QAAU,uBAAuB,UAAY,yBAAyB,QAAU,uBAAuB,IAAM,mBAAmB,UAAY,yBAAyB,MAAQ,qBAAqB,UAAY,yBAAyB,YAAc,2BAA2B,UAAY,yBAAyB,SAAW,wBAAwB,UAAY,2B,wCCD3eD,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,oLCuC5BC,I,0BCSAC,mBAPf,SAAyBC,GACrB,MAAO,CACHC,OAAQD,EAAMC,OACdC,SAAUF,EAAME,YAITH,EAzCU,SAAC,GAA8C,IAA5CE,EAA2C,EAA3CA,OAAQE,EAAmC,EAAnCA,SAAUD,EAAyB,EAAzBA,SAAUE,EAAe,EAAfA,SA0BpD,OACI,oCACA,kBAACC,EAAA,EAAD,CAAQC,QAAQ,oBAAoBC,QA1BtB,SAAAC,GACdP,EAAOQ,aAEPL,EAAS,CACLM,KAAM,SACNT,SACAC,aAGJS,YAAS,OAiBT,eACA,kBAACN,EAAA,EAAD,CAAQC,QAAQ,oBAAoBC,QAfnB,SAAAC,GAEjBP,EAAOW,KAAK,gBACR,CACIT,WACAU,SAJK,OAcb,uB,yCC2COd,mBANf,SAAyBC,GACrB,MAAO,CACHE,SAAUF,EAAME,YAITH,EAhEA,SAAC,GAA8C,IAA5CE,EAA2C,EAA3CA,OAAQE,EAAmC,EAAnCA,SAAUD,EAAyB,EAAzBA,SAAyB,EAAfE,SAE1CU,qBAAW,YACU,OAAbZ,GACAA,EAASa,OAAS,QACLC,IAAbd,GACa,OAAbC,GACAA,EAASY,OAAS,QACLC,IAAbb,IACAQ,YAAS,OAEd,CAACV,EAAQC,EAAUC,IAuBtB,OACI,oCACI,kBAACc,EAAA,EAAD,CAAQC,GAAG,YAAYZ,QAAQ,QAC/B,kBAACW,EAAA,EAAOE,MAAR,CAAcC,KAAI,WAAMjB,IAAxB,kBACA,kBAACc,EAAA,EAAOI,OAAR,CAAeC,gBAAc,qBAC7B,kBAACL,EAAA,EAAOM,SAAR,CAAiBC,GAAG,oBAChB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACf,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,KAAf,QACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,SAAf,QACA,kBAACQ,EAAA,EAAD,CAAaC,MAAM,WAAWL,GAAG,sBAC7B,kBAACI,EAAA,EAAYE,KAAb,CAAkBvB,QA/BlB,SAACwB,EAAGlB,GAChBmB,QAAQC,IAAIpB,GACZF,YAAS,IAAIR,EAAS,IAAIU,KA6Bd,aACA,kBAACe,EAAA,EAAYE,KAAb,CAAkBV,KAAI,WAAMjB,EAAN,gBAAtB,eACA,kBAACyB,EAAA,EAAYE,KAAb,CAAkBV,KAAI,WAAMjB,EAAN,MAAtB,oBACA,kBAACyB,EAAA,EAAYM,QAAb,MACA,kBAACN,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,oBAGJ,kBAAC,EAAD,CAAkBjB,SAAUA,U,SCG7BJ,mBANf,SAAyBC,GACrB,MAAO,CACHE,SAAUF,EAAME,YAITH,EA3DI,SAAC,GAA8C,IAA5CE,EAA2C,EAA3CA,OAAQC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAAe,EAC3B+B,mBAAS,IADkB,mBACrDC,EADqD,KAC3CC,EAD2C,OAEzBF,mBAAS,IAFgB,mBAErDG,EAFqD,KAE1CC,EAF0C,OAGvBJ,mBAAS,IAHc,mBAGzCK,GAHyC,WA8B7D,OAzBA1B,qBAAW,YACU,OAAbZ,GACAA,EAASa,OAAS,QACLC,IAAbd,GACa,OAAbC,GACAA,EAASY,OAAS,QACLC,IAAbb,IACAQ,YAAS,KAGbV,EAAOwC,GAAG,qBAAqB,SAAAC,GAC3BF,EAAcE,EAAKC,gBACnBN,EAAYK,EAAKN,UACjBG,EAAaG,EAAKJ,WAElBlC,EAAS,CACLM,KAAM,gBACNkC,WAAYF,EAAKC,eACjBP,SAAUM,EAAKN,SACfE,UAAWI,EAAKJ,iBAIzB,CAACrC,EAAQE,EAAUD,IAGlB,oCAEA,yBAAKwB,UAAW,CAACmB,IAASC,WAAYD,IAASE,WAAWC,KAAK,MAC/D,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAAC9C,QAAQ,QACtC,+BACY,wBAAIoB,UAAWmB,IAASQ,QAClBjB,EAASkB,KAAK,SAACC,EAAMC,GAAP,OACZ,wBAAIC,IAAKD,EAAG9B,UAAWmB,IAASa,WAAYH,OAGpD,wBAAI7B,UAAWmB,IAASc,SACtBrB,EAAUgB,KAAK,SAACM,EAAOJ,GAAR,OACT,wBAAIC,IAAKD,GAAII,EAAb,gB,gBC4Db7D,mBANf,SAAyBC,GACrB,MAAO,CACHE,SAAUF,EAAME,YAITH,EA3GM,SAAC,GAA8C,IAE5Dc,EAFgBZ,EAA2C,EAA3CA,OAAQG,EAAmC,EAAnCA,SAAUF,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAAe,EAC3BgC,mBAAS,IADkB,mBACvD0B,EADuD,KAC5CC,EAD4C,KAI/DhD,qBAAW,WACPb,EAAOwC,GAAG,aAAa,SAAAC,GACnBoB,EAAapB,QAGlB,CAACzC,IAEJ,IAAM8D,EAAe,SAAAhC,IACA,MAAZ7B,GAAoBA,EAASa,OAAS,QAAiBC,GAAZd,IAC5CS,YAAS,KAGbE,EAAWkB,EAAEiC,OAAOC,MAEpB7D,EAAS,CACLM,KAAM,cACNG,aAGJT,EAAS,CACLM,KAAM,cACNG,aAGJZ,EAAOW,KAAK,gBACR,CACIT,WACAD,WACAW,cAKZ,OACI,oCACA,yBAAKa,UAAW,CAACwC,IAAOC,WAAYD,IAAOnB,UAAWmB,IAAOE,SAASpB,KAAK,MACvE,yBAAKtB,UAAWwC,IAAOC,YACnB,wBAAIzC,UAAWwC,IAAOnB,WAAtB,YAA2C7C,EAA3C,KACA,wBAAIwB,UAAWwC,IAAOnB,WAAtB,oBAAmD5C,GAC/C,6BACJ,wBAAIuB,UAAWwC,IAAOnB,WAAtB,sBACI,6BACJ,uBAAGsB,MAAO,CAACC,MAAO,QAAST,GAC3B,yBAAKnC,UAAWwC,IAAOpB,YACnB,yBAAKpB,UAAWwC,IAAOC,YACnB,4BACI5D,QAASwD,EACTE,MAAM,WACNvC,UAAWwC,IAAOK,SAHtB,aAKU,IACV,6BACI,4BACAhE,QAASwD,EACTE,MAAM,iBACNvC,UAAWwC,IAAOK,SAHlB,oBAKM,IACN,6BACJ,4BACAhE,QAASwD,EACTE,MAAM,mBACNvC,UAAWwC,IAAOK,SAHlB,wBAKU,IACN,8BAER,yBAAK7C,UAAWwC,IAAOC,YACnB,4BACI5D,QAASwD,EACTE,MAAM,mBACNvC,UAAWwC,IAAOK,SAHtB,sBAKU,IACN,6BACJ,4BACIhE,QAASwD,EACTE,MAAM,cACNvC,UAAWwC,IAAOK,SAHtB,gBAKU,IACN,6BACJ,4BACIhE,QAASwD,EACTE,MAAM,eACNvC,UAAWwC,IAAOK,SAHtB,mBAKU,IACN,qC,iBCvBbxE,mBANf,SAAyBC,GACvB,MAAO,CACHE,SAAUF,EAAME,YAIPH,EArEF,SAAC,GAAsC,IAAnCE,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,SAAgB,EACjBgC,mBAAS,IADQ,mBACzCqC,EADyC,KAChCC,EADgC,OAEbtC,mBAAS,IAFI,mBAEzCuC,EAFyC,KAE9BC,EAF8B,OAKXxC,oBAAS,GALE,6BAOjDrB,qBAAW,YACS,MAAZZ,GACAA,EAASa,OAAS,QACNC,GAAZd,GACY,MAAZC,GACAA,EAASY,OAAS,QACNC,GAAZb,IACFQ,YAAS,KAGbV,EAAOwC,GAAG,iBAAiB,SAAAC,GACzB+B,EAAW/B,QAGZ,CAACzC,EAAQE,EAAUD,IAkBtB,OACE,yBAAKmE,MAAO,CAAC,OAAW,QACtB,yBAAK3C,UAAWkD,IAAWC,SACvBL,EAAQlB,KAAK,SAACwB,EAAStB,GAAV,OACbsB,EAAQ5E,WAAaA,EACnB,yBAAKuD,IAAKD,EAAG9B,UAAWkD,IAAWG,aACjC,uBAAGV,MAAO,CAAC,gBAAoB,cAA/B,IAA+CS,EAAQE,IAAvD,MAEF,yBAAKvB,IAAKD,EAAG9B,UAAWkD,IAAWK,iBACnC,uBAAGZ,MAAO,CAAC,gBAAoB,WAA/B,IAA4CS,EAAQ5E,SAASgF,oBAA7D,MAAqFJ,EAAQE,UAInG,0BAAMG,SA7BM,SAAApD,GACdA,EAAEqD,iBACF,IAAIC,EAAM,IAAIC,KAEdrF,EAAOW,KAAK,SACV,CACET,WACAD,WACAwE,YACAa,UAAWF,IAGfV,EAAa,MAkBT,2BAAOjE,KAAK,OACV8E,YAAY,oBACZvB,MAAOS,EACPe,SAAU,SAAA1D,GAAC,OAAE4C,EAAa5C,EAAEiC,OAAOC,UACnC,2BAAOvD,KAAK,SAASuD,MAAM,cCCtBlE,mBAPf,SAAyBC,GACrB,MAAO,CACHC,OAAQD,EAAMC,OACdC,SAAUF,EAAME,YAITH,EA1DQ,SAAC,GAAkB,EAAhB2F,UAAiB,IACjCC,EAAoB,WAEtB,IAAMC,GAAkB,IAAIN,MAAU,IAAIA,KAItCO,EAAW,GAYf,OAVKD,EAAiB,IAClBC,EAAW,CACPC,KAAMC,KAAKC,MAAQJ,EAAc,OACjCK,MAAOF,KAAKC,MAAQJ,EAAc,KAAwB,IAC1DM,QAASH,KAAKC,MAAQJ,EAAiB,IAAO,GAAM,IACpDO,QAASJ,KAAKC,MAAQJ,EAAiB,IAAQ,IAC/CQ,aAAcL,KAAKC,MAAQJ,EAAiB,OAI7CC,GAnB2B,EAsBJ1D,mBAAUwD,KAtBN,mBAsB9BE,EAtB8B,KAsBpBQ,EAtBoB,KAwBtCvF,qBAAW,WACPwF,YAAY,WACRD,EAAaV,OACd,MAGP,IAAMY,EAAkB,GAcxB,OAZAC,OAAOC,KAAKZ,GAAUa,SAAQ,SAAAC,GACrBd,EAASc,IAIdJ,EAAgBK,KACZ,8BACKf,EAASc,GADd,IAC0BA,EAAU,SAMxC,yBAAKjF,UAAWwC,IAAOnB,WAClBwD,EAAgBxF,OAASwF,EAAkB,gDC4OzCxG,mBANf,SAAyBC,GACrB,MAAO,CACHE,SAAUF,EAAME,YAITH,EArRE,SAAC,GAAoC,IAAlCE,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAAe,EAIXgC,oBAAS,GAJE,gCAOHA,mBAAS,WAPN,mBAOzC0E,EAPyC,KAOzBC,EAPyB,OAQG3E,mBAAS,UARZ,mBAQzC4E,EARyC,KAQtBC,EARsB,OAWX7E,mBAAS,UAXE,mBAWzC8E,EAXyC,KAW7BC,EAX6B,OAYf/E,qBAZe,mBAYzCgF,EAZyC,KAY/BC,EAZ+B,OAanBjF,qBAbmB,mBAazCkF,EAbyC,KAajCC,EAbiC,OAgBbnF,mBAAS,IAhBI,mBAgBzCuC,EAhByC,KAgB9BC,EAhB8B,OAiBbxC,mBAAS,IAjBI,mBAiBzCoF,EAjByC,KAiB9BC,EAjB8B,OAkBTrF,mBAAS,SAlBA,mBAkBzCsF,EAlByC,KAkB5BC,EAlB4B,OAqBvBvF,mBAAS,IArBc,mBAqB1CwF,EArB0C,KAqBnCC,EArBmC,OAsBfzF,mBAAS,GAtBM,mBAsB1C0F,EAtB0C,KAsB/BC,EAtB+B,KAyBjDhH,qBAAW,YAEU,MAAZZ,GAAoBA,EAASa,OAAS,QAAiBC,GAAZd,IAC5CS,YAAS,KAGbV,EAAOW,KAAM,kBACT,CACImH,SAAU9H,EAAOuB,GACjBtB,WACAC,WACA0H,YACAhH,SApCK,aAwCbZ,EAAOwC,GAAG,eAAe,SAAAC,GACrB/B,YAAS,IAAIR,EAAS,IAAIuC,MAG9BzC,EAAOwC,GAAG,wBAAwB,SAAAC,GAC9BoE,EAAkB,WAClBE,EAAqB,UACrBI,EAAY1E,EAAKyE,UACjBG,EAAU5E,EAAK2E,QACfO,EAASlF,EAAKsF,cAGlB/H,EAAOwC,GAAG,0BAA0B,SAAAC,GAChCoE,EAAkB,UAClBE,EAAqB,WACrBQ,EAAa,CACT9E,EAAKxC,SAAS,cACdwC,EAAKyE,SAAS,WAAWzE,EAAK2E,OAAO,IAAK,uBAAuB3E,EAAKuF,eAAe,wBACrF,8BACJP,EAAe,eAGpB,CAACzH,EAAQE,EAAUD,EA9DL,aAiEjB,IACMgI,EAAmB,SAAA1H,GACrB0G,EAAc1G,EAAMwD,OAAOC,QA6I/B,OACI,oCACA,yBAAKvC,UAAWwC,IAAOiE,YAGvB,wBAAIzG,UAAWwC,IAAOnB,WAAtB,IAAkC,+BAAK7C,EAAL,KAAlC,MAEQ,6BACJ,wBAAIwB,UAAWwC,IAAOnB,WAAtB,aACI,6BACJ,6BAzJiB,CAAE,OAAQ,SAAU,OAAQ,UA0JvBO,KAAK,SAAC8E,EAAG5E,GAEvB,OACI,4BACIjD,QAAS2H,EACTzE,IAAKD,EACL6E,KAAMD,EACNnE,MAAOmE,EACP1G,UAAY0G,GAAKnB,EAAa/C,IAAOoE,UAAYpE,IAAOqE,aACnDH,OAKjB,6BAEJ,4BAAQ7H,QApKK,SAACwB,GAElB,IACIyG,GADM,IAAIlD,MACSmD,UACvBb,EAASY,GACTV,EAAa,GAEbN,EAAa,IACbV,EAAkB,WAElB,IAOI4B,EACAC,EACAC,EACAC,EAVEC,EAAY,CAAE,IAAK,IAAK,QAExBC,EAAe,SAACC,EAAQC,GAE1B,OADUlD,KAAKC,MAAMD,KAAKmD,UAAYF,EAASC,GAAUA,IAiC1C,QAAdhC,IACDyB,EAAM,GACNC,EAAM,EACNC,EAAQ,EACRC,EAAQ,GAEO,UAAd5B,IACDyB,EAAM,GACNC,EAAM,EACNC,EAAQ,EACRC,EAAQ,GAEO,QAAd5B,IACDyB,EAAM,IACNC,EAAM,GACNC,EAAQ,EACRC,EAAQ,GAEO,UAAd5B,GACDyB,EAAM,KACNC,EAAM,GACNC,EAAQ,EACRC,EAAQ,GAER3B,EAAc,QAjDM,SAACwB,EAAKC,EAAKC,EAAOC,GACtC,IAGIM,EAHEC,EAAOL,EAAaL,EAAKC,GACzBU,EAAON,EAAaL,EAAKC,GACzBW,EAAWR,EAAUC,EAAaH,EAAOC,IAE/B,KAAZS,IACAH,EAASC,EAAKC,GAEF,KAAZC,IACAH,EAASC,EAAKC,GAEF,QAAZC,IACAH,EAASC,EAAKC,GAGlBpJ,EAAOW,KAAK,0BACR,CACIuG,SAAWiC,EAAK,IAAIE,EAAS,IAAID,EACjChC,OAAQ8B,EACRnB,UAAWQ,IAgCvBe,CAAgBb,EAAKC,EAAKC,EAAOC,IA4FEnH,UAAWwC,IAAOsF,WAAY,UAAYvC,EAAa,YAClF,6BACJ,yBAAKvF,UAA6B,UAAlBmF,EACV3C,IAAOuF,WACPvF,IAAOwF,aACL,kBAAC,EAAD,CAAgBhE,UAAU,OAC1B,uBAAGhE,UAAWwC,IAAOnB,WAAYoE,GAC7B,6BACA,6BACA,6BACR,0BAAMhC,SAlGC,SAAC3E,GAGhB,GAFAA,EAAM4E,iBAEDV,GAAa2C,EAAS,CAEvB,IACIsC,GADM,IAAIrE,MACOmD,UACjBR,EAAiBlC,KAAK6D,OAAQD,GAAehC,GAAQ,IACrDkC,EAAS,GAAG5B,EAehBjG,QAAQC,IAAI,WAAW4H,GACvBjC,EAAS,IAGTJ,EAAa,CACT,gEACAL,EAAS,eAAezC,EAAU,IAClC,cAAcmF,EAAO,WACrB,eAAe5B,EAAe,aAClCP,EAAe,SAGf/C,EAAa,IACbmC,EAAkB,UAGlB7G,EAAOW,KAAK,yBACR,CACImH,SAAU9H,EAAOuB,GACjBtB,WACAC,WACAgH,WACAE,SACAY,iBACA4B,gBAKRrC,EAAa,CACT,SACAL,EAAW,mBAAmBzC,EAAU,MAC5CgD,EAAe,OAEnB/C,EAAa,IACbqC,EAAqB,aAyCT,2BACItG,KAAK,OACL8E,YAAY,wBACZvB,MAAOS,EACPe,SAAU,SAAA1D,GAAC,OAAE4C,EAAa5C,EAAEiC,OAAOC,UACvC,2BAAOvD,KAAK,SAASuD,MAAM,aAG/B,6BACJ,yBAAKvC,UAAgC,UAArBqF,EACV7C,IAAOuF,WACPvF,IAAOwF,aACRnC,EAAUxG,OAAS,GAAKwG,EAAUjE,KAAK,SAAC0B,EAAKxB,GAAN,OACpC,oCACA,uBAAGa,MAAO,CAACC,MAAOmD,GAAchE,IAAKD,GAAIwB,GACrC,uCCvOTjF,mBARf,SAAyBC,GACrB,MAAO,CACHC,OAAQD,EAAMC,OACdC,SAAUF,EAAME,SAChB4J,UAAW9J,EAAM8J,aAIV/J,EArCQ,SAAC,GAAiB,EAAfI,SAAgB,IAAD,EASPgC,mBAAS,MATF,gCAUDA,mBAAS,KAVR,6BAoBrC,OACI,oCACA,yBAAKT,UAAWwC,IAAOiE,YACnB,wBAAIzG,UAAWwC,IAAOnB,WAAtB,yBCrBRgH,EAAcC,EAAQ,KA2PXjK,mBANf,SAAyBC,GACrB,MAAO,CACHE,SAAUF,EAAME,YAITH,EAzPU,SAAC,GAAsC,IAAnCE,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,SAAgB,EAIrBgC,oBAAS,GAJY,gCAObA,mBAAS,WAPI,mBAOnD0E,EAPmD,KAOnCC,EAPmC,OAQP3E,mBAAS,UARF,mBAQnD4E,EARmD,KAQhCC,EARgC,OAWrB7E,mBAAS,QAXY,mBAWnD8E,EAXmD,KAWvCC,EAXuC,OAYjB/E,mBAAS,IAZQ,mBAYnD8H,EAZmD,KAYrCC,EAZqC,OAavB/H,mBAAS,IAbc,mBAanDuC,EAbmD,KAaxCC,EAbwC,OAgBvBxC,mBAAS,IAhBc,mBAgBnDoF,EAhBmD,KAgBxCC,EAhBwC,OAiBnBrF,mBAAS,SAjBU,mBAiBnDsF,EAjBmD,KAiBtCC,EAjBsC,OAoB/BvF,mBAAS,IApBsB,mBAoBnDwF,EApBmD,KAoB5CC,EApB4C,OAqBvBzF,mBAAS,GArBc,mBAqBxC2F,GArBwC,WAwBvD7H,EAAOW,KAAK,oBACR,CACIV,WACAC,WACAU,SA3BK,qBAiCjBC,qBAAW,YACS,MAAZZ,GACAA,EAASa,OAAS,QACNC,GAAZd,GACY,MAAZC,GACAA,EAASY,OAAS,QACNC,GAAZb,IACAQ,YAAS,KAGbV,EAAOwC,GAAG,eAAe,SAAAC,GACrB/B,YAAS,IAAIR,EAAS,IAAIuC,MAG9BzC,EAAOwC,GAAG,0BAA0B,SAAAC,GAChCV,QAAQC,IAAI,oCAAoCS,EAAKsB,QACrD8C,EAAkB,WAClBE,EAAqB,UACrBkD,EAAgBxH,EAAKsB,QACrB4D,EAASlF,EAAKsF,cAGlB/H,EAAOwC,GAAG,4BAA4B,SAAAC,GAClCV,QAAQC,IAAI,gCAAgCS,EAAKxC,UACjD4G,EAAkB,UAClBE,EAAqB,WACrBQ,EAAa,CACT9E,EAAKxC,SAAS,UACd,uBAAwBwC,EAAKuF,eAAiB,YAC9C,eAAevF,EAAKmH,OAAO,WAC3B,8BACJnC,EAAe,eAGpB,CAACzH,EAAQE,EAAUD,EAnEL,qBAsEjB,IACMgI,EAAmB,SAAA1H,GACrB0G,EAAc1G,EAAMwD,OAAOC,QA4G/B,OACI,oCACA,yBAAKvC,UAAWwC,IAAOiE,YAEnB,wBAAIzG,UAAWwC,IAAOnB,WAAtB,IAAkC,+BAAK7C,EAAL,KAAlC,MAEI,6BACJ,wBAAKwB,UAAWwC,IAAOnB,WAAvB,sBACI,6BACJ,6BAvHiB,CAAC,OAAQ,SAAU,OAAQ,UAwHtBO,KAAK,SAAC8E,EAAG5E,GAEvB,OACI,4BACIjD,QAAS2H,EACTzE,IAAKD,EACL6E,KAAMD,EACNnE,MAAOmE,EACP1G,UAAY0G,GAAKnB,EAAa/C,IAAOoE,UAAYpE,IAAOqE,aACvDH,OAKb,6BAEJ,4BAAQ7H,QAlIK,WAEjB,IAQI4J,EAPA3B,GADM,IAAIlD,MACSmD,UACvBb,EAASY,GACTV,EAAa,GAEbN,EAAa,IACbV,EAAkB,WAGE,SAAfG,IACDkD,EAASJ,EAAY,IAEN,UAAd9C,IACDkD,EAASJ,EAAY,IAEN,QAAd9C,IACDkD,EAASJ,EAAY,IAEN,UAAd9C,IAEDkD,EAASpE,KAAKmD,SAASkB,SAAS,IAAIC,UAAU,EAAG,IAAMN,EAAY,GAAG/G,KAAK,IAC3EhB,QAAQC,IAAI,kBAAkBkI,IAGlClK,EAAOW,KAAK,4BACZ,CACIoD,OAAQmG,EACRnC,UAAWQ,KAqGoB9G,UAAWwC,IAAOsF,WAAY,UAAYvC,EAAa,YAClF,6BACJ,yBAAKvF,UAA6B,UAAlBmF,EACV3C,IAAOuF,WACPvF,IAAOwF,aACL,uBAAGhI,UAAWwC,IAAOnB,WAArB,IAAkCkH,EAAlC,KACI,6BACA,6BACA,6BACR,0BAAM9E,SAzGC,SAAC3E,GAGhB,GAFAA,EAAM4E,iBAEa,UAAd6B,GAA0BvC,GAAauF,EAAe,CACvD,IAAI5E,EAAM,IAAIC,KACVqE,EAAatE,EAAIoD,UAAWpD,EAAIiF,aAAcF,WAClD,IAAInC,EAAiBlC,KAAK6D,OAAQD,GAAehC,GAAQ,IACrDkC,EAAS,KAAMF,GAAehC,GAAO,IACzCC,EAAS,IAETJ,EAAa,CACT,wEACA,cAAcqC,EAAO,WACrB,eAAe5B,EAAe,aAClCP,EAAe,SAGf/C,EAAa,IACbmC,EAAkB,UAElB7G,EAAOW,KAAK,2BACR,CACImH,SAAU9H,EAAOuB,GACjBtB,WACAC,WACAgK,OAAQF,EACRhC,iBACA4B,WAKZ,GAAmB,UAAd5C,GAA0BvC,GAAauF,EAAajH,KAAK,IAAK,CAC/D,IACI2G,GADM,IAAIrE,MACOmD,UACjBR,EAAiBlC,KAAK6D,OAAQD,GAAehC,GAAQ,IACrDkC,EAAS,KAAMF,GAAehC,GAAO,IACzCC,EAAS,IAETJ,EAAa,CACT,gEACA,cAAcqC,EAAO,WACrB,eAAe5B,EAAe,aAClCP,EAAe,SAGf/C,EAAa,IACbmC,EAAkB,UAElB7G,EAAOW,KAAK,2BACR,CACImH,SAAU9H,EAAOuB,GACjBtB,WACAC,WACAgK,OAAQF,EACRhC,iBACA4B,gBAIRrC,EAAa,CACT,SACA,6BAEJE,EAAe,OAEnB/C,EAAa,IACbqC,EAAqB,aAuCT,2BACItG,KAAK,OACL8E,YAAY,mBACZvB,MAAOS,EACPe,SAAW,SAAA1D,GAAC,OAAI4C,EAAa5C,EAAEiC,OAAOC,QACtCsG,QAAW,SAAAxI,GAAC,OAAGA,EAAEqD,oBAErB,4BAAQiD,KAAK,eAAehE,MAAO,CAACmG,gBAAiB,QAAS9J,KAAK,UAAnE,SAGJ,6BACJ,yBAAKgB,UAAgC,UAArBqF,EACV7C,IAAOuF,WACPvF,IAAOwF,aACRnC,EAAUxG,OAAS,GAAKwG,EAAUjE,KAAK,SAAC0B,EAAKxB,GAAN,OACpC,oCACA,uBAAGa,MAAO,CAACC,MAAOmD,GAAchE,IAAKD,GAAIwB,GACrC,uCCpNTjF,mBARf,SAAyBC,GACrB,MAAO,CACHC,OAAQD,EAAMC,OACdC,SAAUF,EAAME,SAChB4J,UAAW9J,EAAM8J,aAIV/J,EA1BK,SAAC,GAAiB,EAAfI,SASnB,OACI,oCACA,yBAAKuB,UAAWwC,IAAOiE,YACnB,wBAAIzG,UAAWwC,IAAOnB,WAAtB,uBCUGhD,mBANf,SAAyBC,GACrB,MAAO,CACHE,SAAUF,EAAME,YAITH,EAtBU,SAAC,GAAiB,EAAfI,SAQxB,OACI,oCACA,yBAAKuB,UAAWwC,IAAOiE,YACnB,wBAAIzG,UAAWwC,IAAOnB,WAAtB,8BCaGhD,mBANf,SAAyBC,GACrB,MAAO,CACHE,SAAUF,EAAME,YAITH,EAxBM,SAAC,GAAiB,EAAfI,SASpB,OACI,oCACA,yBAAKuB,UAAWwC,IAAOiE,YACnB,wBAAIzG,UAAWwC,IAAOnB,WAAtB,0B,kCCmKGhD,mBANf,SAAyBC,GACrB,MAAO,CACHE,SAAUF,EAAME,YAITH,EA1JE,SAAC,GAAsC,IAApCK,EAAmC,EAAnCA,SAAUF,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAAe,EAKhCgC,oBAAU,kBAAMsI,SAA3BxK,EAL2C,sBAQbkC,oBAAS,GARI,6BAwGnD,OA9FArB,qBAAW,WACPb,EAAOW,KAAK,kBACR,CACIV,WACAC,WACAU,SAdK,MAkBbT,EAAS,CACLM,KAAM,YACNT,WAGJG,EAAS,CACLM,KAAM,cACNR,aAGJE,EAAS,CACLM,KAAM,cACNP,aAGJC,EAAS,CACLM,KAAM,cACNG,SAnCS,QA0Dd,IAEHC,qBAAW,WAsCP,OArCiB,OAAbZ,GACAA,EAASa,OAAS,QACLC,IAAbd,GACa,OAAbC,GACAA,EAASY,OAAS,QACLC,IAAbb,IAEAQ,YAAS,KAQbV,EAAOW,KAAK,gBACR,CACIV,WACAC,aAIRF,EAAOW,KAAK,mBACR,CACIV,WACAC,aAIRF,EAAOwC,GAAG,eAAe,SAAAiI,GACrB/J,YAAS,IAAIR,EAAS,IAAIuK,MAG9BzK,EAAOwC,GAAG,kBAAkB,SAAAC,GACxB/B,YAAS,IAAI+B,EAAKvC,SAAS,IAAIuC,EAAK7B,aAGjC,WACHZ,EAAOQ,gBAEZ,CAACR,EAAQC,EAAUC,IAGlB,oCACA,kBAAC,IAAD,CAAMwK,KAAG,EAACC,KAAG,GACb,kBAAC,EAAD,CAAQ3K,OAAQA,EACZE,SAAUA,IACd,kBAAC,EAAD,CAAYF,OAAQA,EAChBE,SAAUA,EACVD,SAAUA,IACd,yBAAKwB,UAAWwC,IAAO2G,YACnB,yBAAKnJ,UAAWoJ,IAAWC,eACvB,kBAAC,IAAD,KACI,kBAAC,EAAD,CAAcC,KAAK,IACf/K,OAAQA,EACRE,SAAUA,IACd,kBAAC,EAAD,CAAU6K,KAAK,YACX/K,OAAQA,EACRE,SAAUA,IACd,kBAAC,EAAD,CAAkB6K,KAAK,oBACnB/K,OAAQA,EACRE,SAAUA,IACd,kBAAC,EAAD,CAAgB6K,KAAK,kBACjB/K,OAAQA,EACRE,SAAUA,IACd,kBAAC,EAAD,CAAa6K,KAAK,eACd/K,OAAQA,EACRE,SAAUA,IACd,kBAAC,EAAD,CAAkB6K,KAAK,oBACnB/K,OAAQA,EACRE,SAAUA,IACd,kBAAC,EAAD,CAAc6K,KAAK,gBACf/K,OAAQA,EACRE,SAAUA,MAGtB,oCACA,kBAAC,EAAD,CAAMF,OAAQA,EACVE,SAAYA,W,QCjBbJ,mBANf,SAAyBC,GACrB,MAAO,CACHE,SAAUF,EAAME,YAITH,EA5HD,SAAC,GAAkB,IAAhBK,EAAe,EAAfA,SAAe,EACQ+B,mBAAS,CACzC8I,MAAO,GACPC,MAAO,GACPC,UAAW,KAJa,mBACpBC,EADoB,KACTC,EADS,OAMMlJ,mBAAU,IANhB,mBAMpBmJ,EANoB,KAMVC,EANU,KAQtBC,EAAkB,SAAAzJ,GACpBsJ,EAAa,eACND,EADK,eAEPrJ,EAAEiC,OAAOqE,KAAOtG,EAAEiC,OAAOC,UA2BlC,OACI,oCACA,yBAAKvC,UAAW,CAACwC,IAAOnB,UAAWmB,IAAOE,SAASpB,KAAK,MACpD,6BACA,yBAAKtB,UAAWwC,IAAOC,YACvB,kBAACsH,EAAA,EAAD,KACI,kBAACA,EAAA,EAAS3J,KAAV,KACI,yBAAK4J,OAAO,QAAQC,IAAI,oBAAoBC,IAAK5B,EAAQ,QAE7D,kBAACyB,EAAA,EAAS3J,KAAV,KACI,yBAAK4J,OAAO,QAAQC,IAAI,WAAWC,IAAK5B,EAAQ,QAEpD,kBAACyB,EAAA,EAAS3J,KAAV,KACI,yBAAK4J,OAAO,QAAQC,IAAI,mBAAmBC,IAAK5B,EAAQ,SAGhE,6BACA,8BAGA,yBAAKtI,UAAW,CAACwC,IAAOnB,UAAWmB,IAAOE,QAASF,IAAOC,YAAYnB,KAAK,MAC3E,6DAEI,6BACJ,uBAAGtB,UAAWwC,IAAO2H,SAArB,4EACI,6BALJ,IAKU,6BACV,0BAAMnK,UAAWwC,IAAOC,WAAYgB,SAjD1B,SAAApD,GACdA,EAAEqD,iBACEgG,EAAUH,MAAMlK,OAAO,GAAKqK,EAAUF,MAAMnK,OAAO,GACnDX,EACI,CACAM,KAAM,cACNR,SAAUkL,EAAUH,QAGxB7K,EACI,CACAM,KAAM,cACNP,SAAUiL,EAAUF,QAGxBvK,YAAS,IAAIyK,EAAUF,QAEvBK,EAAY,4CAkCR,uBAAGlH,MAAO,CAACC,MAAO,QAASgH,GAE3B,yBAAK5J,UAAWwC,IAAO4H,UACnB,8CACA,2BACIpL,KAAK,OACL2H,KAAK,QACLpE,MAAOmH,EAAUH,MACjBxF,SAAU+F,KAEd,6BACJ,yBAAK9J,UAAWwC,IAAO4H,UACnB,6CACA,2BACIpL,KAAK,OACL2H,KAAK,QACLpE,MAAOmH,EAAUF,MACjBzF,SAAU+F,KAEd,6BACJ,yBAAK9J,UAAWwC,IAAO4H,UACnB,4CACA,2BACIpL,KAAK,WACL2H,KAAK,YACLpE,MAAOmH,EAAUD,UACjB1F,SAAU+F,KAEd,6BACJ,yBAAK9J,UAAWwC,IAAO6H,WACnB,4BACIrL,KAAK,SACL2H,KAAM,aACNpE,MAAM,YACNvC,UAAWwC,IAAO8H,WAJtB,cAOA,4BACItL,KAAK,SACL2H,KAAM,aACNpE,MAAM,aACNvC,UAAWwC,IAAO8H,WAJtB,uBC7FLjM,mBANf,SAAyBC,GACvB,MAAO,KAKMD,EAnBf,YAGE,OAHiC,EAAZK,SAInB,oCACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAO4K,KAAK,MACZ,kBAAC,EAAD,CAAUA,KAAK,sB,OCXHiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCqCF,IASEC,EAAQC,aAjDd,SAAkBvM,EAAOwM,GACrB,OAAOA,EAAO9L,MACV,IAAK,YACD,OAAO,eACJV,EADH,CAEAC,OAAQuM,EAAOvM,SAEnB,IAAK,cACD,OAAO,eACJD,EADH,CAEAE,SAAUsM,EAAOtM,WAErB,IAAK,cACD,OAAO,eACJF,EADH,CAEAG,SAAUqM,EAAOrM,WAErB,IAAK,cACD,sBACOH,EADP,CAEIa,SAAW2L,EAAO3L,WAE1B,IAAK,gBACD,sBACOb,EADP,CAEI4C,WAAa4J,EAAO5J,WACpBR,SAAUoK,EAAOpK,SACjBE,UAAWkK,EAAOlK,YAE1B,IAAK,SACD,OAAO,eACAtC,EADP,CAEIC,OAAQ,KACRC,SAAU,OAElB,QACI,OAAOF,KAIM,CACjBC,OAAQ,KACRC,SAAU,KACV4J,UAAW,KACX3J,SAAU,KACVU,SAAW,OAOnB4L,IAASC,OACL,kBAAC,IAAD,CAAUJ,MAAOA,GACb,kBAAC,EAAD,OAEFK,SAASC,eAAe,gBD4DxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpL,QAAQoL,MAAMA,EAAMtI,a,mBExI5BlF,EAAOC,QAAU,CAAC,UAAY,wBAAwB,QAAU,sBAAsB,UAAY,0B,mBCAlGD,EAAOC,QAAU,CAAC,QAAU,kCAAkC,WAAa,qCAAqC,WAAa,qCAAqC,UAAY,oCAAoC,OAAS,iCAAiC,QAAU,kCAAkC,UAAY,oCAAoC,UAAY,sC,kBCApWD,EAAOC,QAAU,CAAC,WAAa,0BAA0B,WAAa,0BAA0B,WAAa,0BAA0B,QAAU,uBAAuB,cAAgB,6BAA6B,QAAU,uBAAuB,UAAY,yBAAyB,QAAU,uBAAuB,UAAY,yBAAyB,MAAQ,qBAAqB,UAAY,yBAAyB,YAAc,2BAA2B,UAAY,yBAAyB,WAAa,0BAA0B,YAAc,6B,mBCAtiBD,EAAOC,QAAU,CAAC,QAAU,sBAAsB,YAAc,0BAA0B,YAAc,0BAA0B,SAAW,uBAAuB,OAAS,qBAAqB,QAAU,sBAAsB,gBAAkB,8BAA8B,YAAc,0BAA0B,UAAY,wBAAwB,UAAY,wBAAwB,MAAQ,oBAAoB,YAAc,0BAA0B,KAAO,sB","file":"static/js/main.1facdd49.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"entirePage\":\"LoginReg_entirePage__P2JZ4\",\"loginReg\":\"LoginReg_loginReg__10UXJ\",\"hidden\":\"LoginReg_hidden__3RBYY\",\"regform\":\"LoginReg_regform__3eaAa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"flexColCen\":\"Views_flexColCen__lIGZz\",\"flexRowCen\":\"Views_flexRowCen__3NO-q\",\"contentRow\":\"Views_contentRow__-gBcm\",\"onlyDiv\":\"Views_onlyDiv__2qbIE\",\"textWhite\":\"Views_textWhite__1c2bX\",\"textRed\":\"Views_textRed__2dXHn\",\"btn\":\"Views_btn__Ceqzt\",\"buttonMsg\":\"Views_buttonMsg__1it2P\",\"focus\":\"Views_focus__2K86u\",\"activeBtn\":\"Views_activeBtn__25a12\",\"inactiveBtn\":\"Views_inactiveBtn__3zHXU\",\"prettyBtn\":\"Views_prettyBtn__14e9Z\",\"inputRow\":\"Views_inputRow__GxJmG\",\"buttonRow\":\"Views_buttonRow__cTs-p\"};","module.exports = __webpack_public_path__ + \"static/media/game (1).87e5da07.gif\";","module.exports = __webpack_public_path__ + \"static/media/game (2).50a2c1df.gif\";","module.exports = __webpack_public_path__ + \"static/media/game (3).7682298c.gif\";","import React, { useState, useEffect } from 'react';\nimport { Link, Router, Redirect } from '@reach/router';\n\nimport styles from './LoginReg.module.css';\n\nimport FormLogin from '../components/loginreg/FormLogin';\nimport FormReg from '../components/loginreg/FormReg';\n\n\n\nfunction LoginReg() {\n  const [ formVisibilityState, setFormVisibilityState ] = useState(\"loginForm\");\n\n  const toggleFormVisibility = e => {\n    if(formVisibilityState === \"loginForm\") {\n      setFormVisibilityState(\"regForm\");\n    } else {\n      setFormVisibilityState(\"loginForm\");\n    };\n  };\n\n  return (\n    <>\n    <div className={styles.entirePage}>\n      <h1>Welcome to Mini Game App!</h1><br/>\n      <FormLogin formVisibility={formVisibilityState}/>\n      <FormReg formVisibility={formVisibilityState}/>\n      <br/>\n      <button onClick={toggleFormVisibility}>\n        {formVisibilityState === \"loginForm\" \n          ? \"Register\"\n          : \"Login\"}\n      </button><br/>\n    </div>\n    {/* [END] div App */}\n    </>\n  );\n}\n\nexport default LoginReg;\n","import React from 'react';\r\nimport { navigate } from '@reach/router';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst CustomizedButton = ({ socket, roomName, userName, dispatch }) => {\r\n\r\n    const exitParty = event =>{\r\n        socket.disconnect();\r\n\r\n        dispatch({\r\n            type: 'LOGOUT',\r\n            socket,\r\n            userName,\r\n        });\r\n\r\n        navigate('/');\r\n    }\r\n\r\n    const exitThisGame = event =>{\r\n        let gameName=\"\";\r\n        socket.emit(\"navigateParty\",\r\n            {\r\n                roomName,\r\n                gameName\r\n            }\r\n\r\n        )\r\n\r\n    }\r\n    \r\n    return (\r\n        <>        \r\n        <Button variant=\"outline-secondary\" onClick={exitParty}>Go to Lobby</Button>\r\n        <Button variant=\"outline-secondary\" onClick={exitThisGame}>Go to Game Room</Button>\r\n        </>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        socket: state.socket,\r\n        userName: state.userName,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(CustomizedButton);","import React, { useEffect } from 'react';\r\nimport { navigate, Link } from '@reach/router';\r\nimport { connect, useSelector } from 'react-redux';\r\n\r\nimport CustomizedButton from './CustomizedButton';\r\n\r\nimport navBarStyles from './GlobalComponents.module.css';\r\n\r\n//[ BOOTSTRAP ]\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nconst NavBar = ({ socket, roomName, userName, dispatch }) => {\r\n\r\n    useEffect( () => {\r\n        if( userName === null || \r\n            userName.length < 1 || \r\n            userName === undefined || \r\n            roomName === null || \r\n            roomName.length < 1 || \r\n            roomName === undefined ) {\r\n            navigate('/');\r\n        };\r\n    }, [socket, userName, roomName]);\r\n\r\n    const navLink = (e, gameName) => {\r\n        console.log(gameName);\r\n        navigate('/'+roomName+\"/\"+gameName);\r\n    };\r\n\r\n    // const navigateLobby = e => {\r\n    //     socket.emit(\"navigateParty\", \r\n    //         {\r\n    //             roomName,\r\n    //             gameName: \"\"\r\n    //         }\r\n    //     );\r\n    // };\r\n\r\n    // const exitParty = event =>{\r\n    //     console.log(\"Socket should disconnect\");\r\n    //     socket.disconnect();\r\n    //     navigate('/');\r\n\r\n    // }\r\n    \r\n    return (\r\n        <>\r\n            <Navbar bg=\"secondary\" variant=\"dark\">\r\n            <Navbar.Brand href={`/${roomName}`}>MiniGame Party</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                <Nav.Link href=\"#\">Home</Nav.Link>\r\n                <Nav.Link href=\"#link\">Link</Nav.Link>\r\n                <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\r\n                    <NavDropdown.Item onClick={navLink}>Math Head</NavDropdown.Item>\r\n                    <NavDropdown.Item href={`/${roomName}/typefaster`}>Type faster</NavDropdown.Item>\r\n                    <NavDropdown.Item href={`/${roomName}/`}>Wise To Memorise</NavDropdown.Item>\r\n                    <NavDropdown.Divider />\r\n                    <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n                </NavDropdown>\r\n                </Nav>\r\n                <CustomizedButton roomName={roomName}/>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n        </>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        userName: state.userName,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(NavBar);","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { navigate } from '@reach/router';\r\n\r\n// [ STYLING ]\r\nimport sbStyles from './GlobalComponents.module.css';\r\n\r\n//[ BOOTSTRAP ]\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nconst Scoreboard = ({ socket, userName, roomName, dispatch }) => {\r\n    const [ userList, setUserList ] = useState([]);\r\n    const [ scoreList, setScoreList ] = useState([]);\r\n    const [ scoreboard, setScoreboard ] = useState([]);\r\n\r\n    useEffect( () => {\r\n        if( userName === null || \r\n            userName.length < 1 || \r\n            userName === undefined || \r\n            roomName === null || \r\n            roomName.length < 1 || \r\n            roomName === undefined ) {\r\n            navigate('/');\r\n        };\r\n\r\n        socket.on(\"refreshScoreboard\", data => {\r\n            setScoreboard(data.scoreboardList);\r\n            setUserList(data.userList);\r\n            setScoreList(data.scoreList);\r\n\r\n            dispatch({\r\n                type: \"SETSCOREBOARD\",\r\n                scoreboard: data.scoreboardList,\r\n                userList: data.userList,\r\n                scoreList: data.scoreList,\r\n            });\r\n        });\r\n\r\n    }, [socket, roomName, userName]);\r\n\r\n    return (\r\n        <>\r\n\r\n        <div className={[sbStyles.flexRowCen, sbStyles.textWhite].join(' ')}>\r\n        <Table striped bordered hover variant=\"dark\">\r\n        <tbody>\r\n                    <tr className={sbStyles.sbUser}>\r\n                        { userList.map( (user, i) =>\r\n                            <td key={i} className={sbStyles.cellWidth}>{user}</td>\r\n                        )}\r\n                    </tr>\r\n                    <tr className={sbStyles.sbScore}>\r\n                    { scoreList.map( (score, i) =>\r\n                            <td key={i}>{score} </td>\r\n                        )}\r\n                    </tr>\r\n                </tbody>\r\n        </Table>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        userName: state.userName,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Scoreboard);\r\n\r\n","import React, {useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { navigate } from '@reach/router';\r\n\r\nimport styles from './Games.module.css';\r\n\r\nconst GameSelector = ({ socket, dispatch, userName, roomName }) => {\r\n    const [ systemMsg, setSystemMsg ] = useState(\"\");\r\n    let gameName;\r\n\r\n    useEffect( () => {\r\n        socket.on(\"fullParty\", data => {\r\n            setSystemMsg(data);\r\n        });\r\n\r\n    }, [socket]);\r\n\r\n    const gameSelector = e => {\r\n        if ( userName == null || userName.length < 1 || userName == undefined ) {\r\n            navigate('/');\r\n        };\r\n\r\n        gameName = e.target.value;\r\n\r\n        dispatch({\r\n            type: 'SETGAMENAME',\r\n            gameName,\r\n        });\r\n\r\n        dispatch({\r\n            type: 'SETROOMNAME',\r\n            gameName,\r\n        });\r\n\r\n        socket.emit(\"navigateParty\", \r\n            {\r\n                roomName,\r\n                userName,\r\n                gameName\r\n            }\r\n        );\r\n    };\r\n\r\n    return (\r\n        <>\r\n        <div className={[styles.flexColCen, styles.textWhite, styles.onlyDiv].join(' ')}>\r\n            <div className={styles.flexColCen}>\r\n                <h2 className={styles.textWhite}>Welcome, {userName}!</h2>\r\n                <h3 className={styles.textWhite}>You are in Room: {roomName}</h3>\r\n                    <br/>\r\n                <h3 className={styles.textWhite}>Pick a game below:</h3>\r\n                    <br/>\r\n                <p style={{color: \"red\"}}>{systemMsg}</p>\r\n                <div className={styles.flexRowCen}>\r\n                    <div className={styles.flexColCen}>\r\n                        <button \r\n                            onClick={gameSelector} \r\n                            value=\"mathhead\"\r\n                            className={styles.gameBtn}>\r\n                                Math Head\r\n                        </button>{\" \"}\r\n                        <br/>\r\n                            <button \r\n                            onClick={gameSelector} \r\n                            value=\"wisetomemorize\"\r\n                            className={styles.gameBtn}>\r\n                                Wise to Memorize\r\n                        </button>{\" \"}\r\n                            <br/>\r\n                        <button \r\n                        onClick={gameSelector} \r\n                        value=\"dontcomeinsideme\"\r\n                        className={styles.gameBtn}>\r\n                            Don't Come Inside Me\r\n                        </button>{\" \"}\r\n                            <br/>\r\n                    </div>\r\n                    <div className={styles.flexColCen}>\r\n                        <button \r\n                            onClick={gameSelector} \r\n                            value=\"typefastermaster\"\r\n                            className={styles.gameBtn}>\r\n                                Type Faster Master\r\n                        </button>{\" \"}\r\n                            <br/>\r\n                        <button \r\n                            onClick={gameSelector} \r\n                            value=\"littleboxes\"\r\n                            className={styles.gameBtn}>\r\n                                Little Boxes\r\n                        </button>{\" \"}\r\n                            <br/>\r\n                        <button \r\n                            onClick={gameSelector} \r\n                            value=\"dropafatshot\"\r\n                            className={styles.gameBtn}>\r\n                                Drop a Fat Shot\r\n                        </button>{\" \"}\r\n                            <br/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        userName: state.userName,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(GameSelector);","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { navigate } from '@reach/router';\r\n\r\nimport chatStyles from './Chat.module.css';\r\n\r\nconst Chat = ( { socket, userName, roomName } ) => {\r\n  const [ chatLog, setChatLog ] = useState([]);\r\n  const [ userInput, setUserInput ] = useState(\"\");\r\n\r\n  // ADMIN STATE BOOLEAN\r\n  const [ adminState, setAdminState ] = useState(false);\r\n\r\n  useEffect( () => {\r\n    if (  userName == null || \r\n          userName.length < 1 || \r\n          userName == undefined || \r\n          roomName == null || \r\n          roomName.length < 1 || \r\n          roomName == undefined ) {\r\n        navigate('/');\r\n    };\r\n\r\n    socket.on('updateChatLog', data => {\r\n      setChatLog(data);\r\n    });\r\n\r\n  }, [socket, roomName, userName]);\r\n\r\n  const sendMsg = e => {\r\n    e.preventDefault();\r\n    let now = new Date();\r\n\r\n    socket.emit(\"newMsg\", \r\n      {\r\n        roomName,\r\n        userName,\r\n        userInput,\r\n        timestamp: now,\r\n      }  \r\n    );\r\n    setUserInput(\"\");\r\n\r\n  };\r\n\r\n  return (\r\n    <div style={{'height' : '60%'}}>\r\n      <div className={chatStyles.chatBox}>\r\n        { chatLog.map( (message, i) =>\r\n          message.userName === userName\r\n          ? <div key={i} className={chatStyles.sentMessage}>\r\n              <p style={{'backgroundColor' : 'royalblue'}}> {message.msg} </p>\r\n            </div>\r\n          : <div key={i} className={chatStyles.recievedMessage}>\r\n            <p style={{'backgroundColor' : 'silver'}}> {message.userName.toLocaleUpperCase()} : {message.msg}</p>\r\n            </div>\r\n        )}\r\n      </div>\r\n      <form onSubmit={sendMsg}>\r\n        <input type=\"text\"\r\n          placeholder=\"Type message here\"\r\n          value={userInput}\r\n          onChange={e=>setUserInput(e.target.value)}/>\r\n          <input type=\"submit\" value=\"Send\"/>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n      userName: state.userName,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Chat);","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n// [ STYLING ]\r\nimport styles from './GlobalComponents.module.css';\r\n\r\nconst CountdownTimer = ({ startTime }) => {\r\n    const calculateTimeLeft = () => {\r\n        // below follows the example in online article\r\n        const timeDifference = +new Date() - +new Date();\r\n\r\n        // below if we used .getTime() as startTime\r\n        // const timeDifference = startTime - +new Date().getTime();\r\n        let timeLeft = {};\r\n\r\n        if ( timeDifference > 0 ) {\r\n            timeLeft = {\r\n                days: Math.floor( (timeDifference / (1000 * 60 * 60 * 24)) ),\r\n                hours: Math.floor( (timeDifference / (1000 * 60 * 60) ) % 24 ),\r\n                minutes: Math.floor( (timeDifference / 1000 / 60) % 60 ),\r\n                seconds: Math.floor( (timeDifference / 1000) % 60 ),\r\n                milliseconds: Math.floor( (timeDifference / 1000) ),\r\n            }\r\n        };\r\n\r\n        return timeLeft;\r\n    };\r\n\r\n    const [ timeLeft, setTimeLeft ] = useState( calculateTimeLeft() );\r\n\r\n    useEffect( () => {\r\n        setTimeout( () => {\r\n            setTimeLeft( calculateTimeLeft() );\r\n        }, 1);\r\n    });\r\n\r\n    const timerComponents = [];\r\n\r\n    Object.keys(timeLeft).forEach(interval => {\r\n        if (!timeLeft[interval]) {\r\n            return;\r\n        }\r\n\r\n        timerComponents.push(\r\n            <span>\r\n                {timeLeft[interval]} {interval}{\" \"}\r\n            </span>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className={styles.textWhite}>\r\n            {timerComponents.length ? timerComponents : <span>Time's up!</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        socket: state.socket,\r\n        userName: state.userName,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(CountdownTimer);","import React, { useState, useEffect } from 'react';\r\nimport { navigate } from '@reach/router';\r\nimport { connect } from 'react-redux';\r\n\r\n// [ COMPONENTS ]\r\nimport CountdownTimer from '../CountdownTimer';\r\n\r\n// [ STYLING ]\r\nimport styles from './Games.module.css';\r\n\r\n\r\nconst MathHead = ({ socket, userName, roomName }) => {\r\n    const gameName = \"mathhead\";\r\n\r\n    // ADMIN STATE BOOLEAN\r\n    const [ adminState, setAdminState ] = useState(false);\r\n\r\n    // ELEMENT VISIBILITY\r\n    const [ formVisibility, setFormVisibility ] = useState(\"hidden\");\r\n    const [ resultsVisibility, setResultsVisibility ] = useState(\"hidden\");\r\n\r\n    // CREATING QUESTION AND ANSWER\r\n    const [ difficulty, setDifficulty ] = useState(\"Medium\");\r\n    const [ question, setQuestion ] = useState();\r\n    const [ answer, setAnswer ] = useState();\r\n\r\n    // POST ANSWER SUBMISSION\r\n    const [ userInput, setUserInput ] = useState(\"\");\r\n    const [ resultMsg, setResultMsg ] = useState([]);\r\n    const [ resultColor, setResultColor ] = useState(\"white\");\r\n\r\n    // ANSWER TIMER\r\n    const [timer, setTimer] = useState(\"\");\r\n    const [totalTime, setTotalTime] = useState(0);\r\n\r\n\r\n    useEffect( () => {\r\n        // validation check to make sure username is not blank/null\r\n        if ( userName == null || userName.length < 1 || userName == undefined ) {\r\n            navigate('/');\r\n        };\r\n\r\n        socket.emit( 'mathHeadEntered', \r\n            {\r\n                socketId: socket.id,\r\n                userName,\r\n                roomName,\r\n                totalTime,\r\n                gameName,\r\n            }\r\n        );\r\n\r\n        socket.on(\"syncNewUser\", data => {\r\n            navigate(\"/\"+roomName+\"/\"+data);\r\n        });\r\n\r\n        socket.on(\"sharedMathHeadTarget\", data => {\r\n            setFormVisibility(\"visible\");\r\n            setResultsVisibility(\"hidden\");\r\n            setQuestion(data.question);\r\n            setAnswer(data.answer);\r\n            setTimer(data.createdAt);\r\n        });\r\n\r\n        socket.on(\"answeredMathHeadTarget\", data => {\r\n            setFormVisibility(\"hidden\");\r\n            setResultsVisibility(\"visible\");\r\n            setResultMsg([\r\n                data.userName+\" beat you! \", \r\n                data.question+\" equals \"+data.answer+\"!\", \"It took that player \"+data.totalTimeTaken+\" seconds to beat you!\", \r\n                \"You can get it next time!\"]);\r\n            setResultColor(\"orange\");\r\n        });\r\n\r\n    }, [socket, roomName, userName, gameName]);\r\n    \r\n    // Change difficulty\r\n    const difficultyLevels = [ \"Easy\", \"Medium\", \"Hard\", \"Genius\" ];\r\n    const changeDifficulty = event => {\r\n        setDifficulty(event.target.value);\r\n    };\r\n\r\n    // [ TOP ] Create question and use sockets to share with all players\r\n    const createTarget = (e) => {\r\n        // Start timer\r\n        let now = new Date();\r\n        let questionTime = now.getTime();\r\n        setTimer(questionTime);\r\n        setTotalTime(0);\r\n\r\n        setResultMsg([]);\r\n        setFormVisibility(\"visible\");\r\n\r\n        const operators = [ \"+\", \"-\", \"×\"];\r\n\r\n        const getRandomInt = (maxNum, minNum) => {\r\n            let num = Math.floor(Math.random() * (maxNum - minNum) + minNum );\r\n            return num;\r\n        }; // [END] subfunction getRandomInt\r\n\r\n        let max;\r\n        let min;\r\n        let maxOp;\r\n        let minOp;\r\n        const generateProblem = (max, min, maxOp, minOp) => {\r\n            const num1 = getRandomInt(max, min);\r\n            const num2 = getRandomInt(max, min);\r\n            const operator = operators[getRandomInt(maxOp, minOp)];\r\n            let result;\r\n            if (operator == \"+\") {\r\n                result = num1+num2;\r\n            };\r\n            if (operator == \"-\") {\r\n                result = num1-num2;\r\n            };\r\n            if (operator == \"×\") {\r\n                result = num1*num2;\r\n            };\r\n\r\n            socket.emit(\"mathHeadTargetGenerated\", \r\n                {\r\n                    question: (num1+\" \"+operator+\" \"+num2),\r\n                    answer: result,\r\n                    createdAt: questionTime\r\n                });\r\n        }; // [END] sub-function generateProblem\r\n\r\n        // Question changes based on difficulty\r\n\r\n        if ( difficulty == \"Easy\" ) {\r\n            max = 21;\r\n            min = 2;\r\n            maxOp = 2;\r\n            minOp = 0;\r\n        };\r\n        if ( difficulty == \"Medium\" ) {\r\n            max = 52;\r\n            min = 5;\r\n            maxOp = 3;\r\n            minOp = 0;\r\n        };\r\n        if ( difficulty == \"Hard\" ) {\r\n            max = 102;\r\n            min = 11;\r\n            maxOp = 3;\r\n            minOp = 0;\r\n        };\r\n        if ( difficulty == \"Genius\" ) {\r\n            max = 1002;\r\n            min = 11;\r\n            maxOp = 3;\r\n            minOp = 0;\r\n        } else {\r\n            setDifficulty(\"Easy\");\r\n        };\r\n        generateProblem(max, min, maxOp, minOp);\r\n    };\r\n    // [ END ] Create question and use sockets to share will players\r\n\r\n    const findResult = (event) => {\r\n        event.preventDefault();\r\n\r\n        if ( userInput == answer ) {\r\n            // time and score\r\n            let now = new Date();\r\n            let answerTime = now.getTime();\r\n            let totalTimeTaken = Math.round((+answerTime - + timer))/1000;\r\n            let points = 15-totalTimeTaken;\r\n\r\n            // if ( difficulty == \"Easy\") {\r\n            //     points = 10-totalTimeTaken;\r\n            // };\r\n            // if ( difficulty == \"Medium\") {\r\n            //     points = 15-totalTimeTaken;\r\n            // };\r\n            // if ( difficulty == \"Hard\") {\r\n            //     points = 20-totalTimeTaken;\r\n            // };\r\n            // if ( difficulty == \"Genius\") {\r\n            //     points = 40-totalTimeTaken;\r\n            // };\r\n\r\n            console.log(\"points: \"+points);\r\n            setTimer(\"\");\r\n            \r\n            // results\r\n            setResultMsg([\r\n                \"🏆🏆 You got it! 🏆🏆\",\r\n                question+\" does equal \"+userInput+\"!\", \r\n                \"You scored \"+points+\" points!\",\r\n                \"It took you \"+totalTimeTaken+\" seconds\",]);\r\n            setResultColor(\"green\");\r\n\r\n            // RESET FORM\r\n            setUserInput(\"\");\r\n            setFormVisibility(\"hidden\");\r\n            \r\n            // [ SOCKET ] emit after answered correctly\r\n            socket.emit(\"mathHeadTargetAnswered\", \r\n                {\r\n                    socketId: socket.id,\r\n                    userName,\r\n                    roomName,\r\n                    question,\r\n                    answer,\r\n                    totalTimeTaken,\r\n                    points\r\n                }\r\n            );\r\n        // wrong answer submitted; set wrong msg and no emit\r\n        } else {\r\n            setResultMsg([\r\n                \"WRONG!\", \r\n                question + \" does not equal \"+userInput+\"!\"]);\r\n            setResultColor(\"red\");\r\n        };\r\n        setUserInput(\"\");\r\n        setResultsVisibility(\"visible\");\r\n    }; // [END] of function findResult\r\n\r\n    return(\r\n        <>\r\n        <div className={styles.entirePage}>\r\n\r\n            \r\n        <h3 className={styles.textWhite}> <i> {userName} </i>  </h3>\r\n            \r\n                <br />\r\n            <h2 className={styles.textWhite}>Math Head</h2>\r\n                <br/>\r\n            <div>\r\n                {difficultyLevels.map( (d, i) => {\r\n\r\n                    return (\r\n                        <button \r\n                            onClick={changeDifficulty} \r\n                            key={i} \r\n                            name={d} \r\n                            value={d} \r\n                            className={(d == difficulty ? styles.activeBtn : styles.inactiveBtn)}>\r\n                                {d}\r\n                        </button>\r\n                    )\r\n                })}\r\n            </div>\r\n                <br/>\r\n\r\n            <button onClick={createTarget} className={styles.createBtn}>{\"Create \" + difficulty + \" Problem\"}</button>\r\n                <br/>\r\n            <div className={formVisibility == \"hidden\" \r\n                ? styles.hiddenForm \r\n                : styles.visibleForm}>\r\n                    <CountdownTimer startTime=\"20\" />\r\n                    <p className={styles.textWhite}>{question}</p>\r\n                        <br/>\r\n                        <br/>\r\n                        <br/>\r\n                <form onSubmit={findResult}>\r\n                    <input \r\n                        type=\"text\"\r\n                        placeholder=\"Enter you answer here\"\r\n                        value={userInput}\r\n                        onChange={e=>setUserInput(e.target.value)}/>\r\n                    <input type=\"submit\" value=\"Submit\"/>\r\n                </form>\r\n            </div>\r\n                <br/>\r\n            <div className={resultsVisibility == \"hidden\" \r\n                ? styles.hiddenForm \r\n                : styles.visibleForm}>\r\n                {resultMsg.length > 0 && resultMsg.map( (msg, i) => \r\n                    <>\r\n                    <p style={{color: resultColor}} key={i}>{msg}</p>\r\n                        <br/>\r\n                    </>\r\n                )}\r\n            </div>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        userName: state.userName,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(MathHead);","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport styles from './Games.module.css';\r\n\r\nconst WiseToMemorize = ({ roomName }) => {\r\n\r\n    // generate a random string\r\n    // show the string for about 3-5 secs\r\n    // string will vanish\r\n    // input field will be invisible, not even password status\r\n    // points will be based off time to type it\r\n    // incorrect submissions will get negative points\r\n\r\n    const [ string, setString ] = useState(null);\r\n    const [ formState, setFormState ] = useState(\"\");\r\n\r\n    const generateRandomString = e => {\r\n        // click button to generate random string at a random setTimeout\r\n    };\r\n\r\n    const submitHandler = e => {\r\n        \r\n    };\r\n\r\n    return(\r\n        <>\r\n        <div className={styles.entirePage}>\r\n            <h2 className={styles.textWhite}>Wise to Memorize</h2>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        socket: state.socket,\r\n        userName: state.userName,\r\n        userScore: state.userScore\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(WiseToMemorize);","import React, { useState, useEffect } from 'react';\r\nimport { navigate } from '@reach/router';\r\nimport { connect } from 'react-redux';\r\n\r\n// [ STYLING ]\r\nimport styles from './Games.module.css';\r\n\r\nvar randomWords = require('random-words');\r\n\r\nconst TypeFasterMaster = ({  socket, userName, roomName })  => {\r\n    const gameName = \"typefastermaster\";\r\n\r\n    // ADMIN STATE BOOLEAN\r\n    const [ adminState, setAdminState ] = useState(false);\r\n\r\n    // ELEMENT VISIBILITY\r\n    const [ formVisibility, setFormVisibility ] = useState(\"hidden\");\r\n    const [ resultsVisibility, setResultsVisibility ] = useState(\"hidden\");\r\n\r\n    // CREATING QUESTION(string) AND ANSWER(userInput)\r\n    const [ difficulty, setDifficulty ] = useState(\"Easy\")\r\n    const [ targetString, setTargetString ] = useState(\"\");\r\n    const [ userInput, setUserInput ] = useState(\"\");\r\n\r\n    // POST ANSWER SUBMISSION\r\n    const [ resultMsg, setResultMsg ] = useState([]);\r\n    const [ resultColor, setResultColor ] = useState(\"white\");\r\n\r\n    // ANSWER TIMER\r\n    const [ timer, setTimer ] = useState(\"\");\r\n    const [ totalTime, setTotalTime ] = useState(0);\r\n       \r\n    // useEffect( () => {\r\n        socket.emit('typeFasterEntered', \r\n            {\r\n                userName,\r\n                roomName,\r\n                gameName,\r\n            }\r\n        );\r\n    // }, [] );\r\n\r\n\r\n    useEffect( () => {  \r\n        if( userName == null || \r\n            userName.length < 1 || \r\n            userName == undefined || \r\n            roomName == null || \r\n            roomName.length < 1 || \r\n            roomName == undefined ) {\r\n            navigate('/');\r\n        };\r\n        \r\n        socket.on(\"syncNewUser\", data => {\r\n            navigate(\"/\"+roomName+\"/\"+data);\r\n        });\r\n\r\n        socket.on(\"sharedTypeFasterTarget\", data => {\r\n            console.log(\"sharedTypeFasterTarget activated:\"+data.target);\r\n            setFormVisibility(\"visible\");\r\n            setResultsVisibility(\"hidden\");\r\n            setTargetString(data.target);\r\n            setTimer(data.createdAt);\r\n        });\r\n\r\n        socket.on(\"answeredTypeFasterTarget\", data => {\r\n            console.log(\"Data from typeFaster client: \"+data.userName);\r\n            setFormVisibility(\"hidden\");\r\n            setResultsVisibility(\"visible\");\r\n            setResultMsg([\r\n                data.userName+\" wins! \", \r\n                \"It took that player \" +data.totalTimeTaken + \" seconds.\",\r\n                \"They scored \"+data.points+\" points!\", \r\n                \"You can get it next time!\"]);\r\n            setResultColor(\"orange\");\r\n        });\r\n        \r\n    }, [socket, roomName, userName, gameName]);\r\n\r\n    // Set difficulty\r\n    const difficultyLevels = [\"Easy\", \"Medium\", \"Hard\", \"Genius\"];\r\n    const changeDifficulty = event =>{\r\n        setDifficulty(event.target.value);\r\n    };\r\n\r\n    // Create Target String\r\n    const createTarget = () => {\r\n\r\n        let now = new Date();\r\n        let questionTime = now.getTime();\r\n        setTimer(questionTime);\r\n        setTotalTime(0);\r\n\r\n        setResultMsg([]);\r\n        setFormVisibility(\"visible\");\r\n\r\n        let string;\r\n        if ( difficulty === \"Easy\" ){\r\n            string = randomWords(2);\r\n        };\r\n        if ( difficulty == \"Medium\" ){\r\n            string = randomWords(4);\r\n        };\r\n        if ( difficulty == \"Hard\" ){\r\n            string = randomWords(6);\r\n        };\r\n        if ( difficulty == \"Genius\" ){ // returning string.join is not a function when submitting answer for Genius problem\r\n            //join used to remove the comma between the words that is being created by randomWords()\r\n            string = Math.random().toString(36).substring(2, 20) + randomWords(4).join('');\r\n            console.log(\"Genius string: \"+string);\r\n        };\r\n\r\n        socket.emit(\"typeFasterTargetGenerated\", \r\n        {\r\n            target: string,\r\n            createdAt: questionTime\r\n        });\r\n    };\r\n\r\n    // Answer submission/confirmation\r\n    const findResult = (event) =>{\r\n        event.preventDefault();\r\n\r\n        if ( difficulty == \"Genius\" && userInput == targetString ) {\r\n            let now = new Date();\r\n            let answerTime = now.getTime();(now.getSeconds()).toString();\r\n            let totalTimeTaken = Math.round((+answerTime - + timer))/1000;\r\n            let points = 40-((+answerTime - + timer)/1000);\r\n            setTimer(\"\");\r\n    \r\n            setResultMsg([\r\n                \"🏆🏆 You got it! Genius! 🏆🏆\",\r\n                \"You scored \"+points+\" points!\",\r\n                \"It took you \"+totalTimeTaken+\" seconds\"]);\r\n            setResultColor(\"green\");\r\n\r\n            //RESET FORM\r\n            setUserInput(\"\");\r\n            setFormVisibility(\"hidden\");\r\n\r\n            socket.emit(\"typeFasterTargetAnswered\", \r\n                {\r\n                    socketId: socket.id,\r\n                    userName,\r\n                    roomName,\r\n                    string: targetString,\r\n                    totalTimeTaken,\r\n                    points\r\n                }\r\n            );\r\n        };\r\n        \r\n        if ( difficulty != \"Genius\" && userInput == targetString.join('') ){\r\n            let now = new Date();\r\n            let answerTime = now.getTime();\r\n            let totalTimeTaken = Math.round((+answerTime - + timer))/1000;\r\n            let points = 20-((+answerTime - + timer)/1000);\r\n            setTimer(\"\");\r\n    \r\n            setResultMsg([\r\n                \"🏆🏆 You got it! 🏆🏆\",\r\n                \"You scored \"+points+\" points!\",\r\n                \"It took you \"+totalTimeTaken+\" seconds\"]);\r\n            setResultColor(\"green\");\r\n\r\n            //RESET FORM\r\n            setUserInput(\"\");\r\n            setFormVisibility(\"hidden\");\r\n\r\n            socket.emit(\"typeFasterTargetAnswered\", \r\n                {\r\n                    socketId: socket.id,\r\n                    userName,\r\n                    roomName,\r\n                    string: targetString,\r\n                    totalTimeTaken,\r\n                    points\r\n                }\r\n            );\r\n        } else {\r\n            setResultMsg([\r\n                \"WRONG!\", \r\n                \"You had a typo in there!\"\r\n            ]);\r\n            setResultColor(\"red\");\r\n        };\r\n        setUserInput(\"\");\r\n        setResultsVisibility(\"visible\");\r\n    }; // [END] of function findResult\r\n\r\n    return (\r\n        <>\r\n        <div className={styles.entirePage}>\r\n\r\n            <h3 className={styles.textWhite}> <i> {userName} </i>  </h3>\r\n\r\n                <br/>\r\n            <h2  className={styles.textWhite}>Type Faster Master</h2>\r\n                <br />\r\n            <div>\r\n                {difficultyLevels.map( (d, i) => {\r\n\r\n                    return (\r\n                        <button \r\n                            onClick={changeDifficulty} \r\n                            key={i} \r\n                            name={d} \r\n                            value={d} \r\n                            className={(d == difficulty ? styles.activeBtn : styles.inactiveBtn)}>\r\n                            {d}\r\n                        </button>\r\n                    )\r\n                })}\r\n            </div>\r\n                <br/>\r\n\r\n            <button onClick={createTarget} className={styles.createBtn}>{\"Create \" + difficulty + \" Problem\"}</button>\r\n                <br />\r\n            <div className={formVisibility == \"hidden\" \r\n                ? styles.hiddenForm \r\n                : styles.visibleForm}>\r\n                    <p className={styles.textWhite}> {targetString} </p>\r\n                        <br/>\r\n                        <br/>\r\n                        <br/>\r\n                <form onSubmit = {findResult}>\r\n                    <input \r\n                        type=\"text\" \r\n                        placeholder=\"Type faster here\"\r\n                        value={userInput} \r\n                        onChange= {e => setUserInput(e.target.value)} \r\n                        onPaste = {e=> e.preventDefault()}\r\n                        />\r\n                    <button name=\"submitButton\" style={{backgroundColor: 'pink'}} type=\"submit\">Go!</button>\r\n                </form>  \r\n            </div>\r\n                <br />\r\n            <div className={resultsVisibility == \"hidden\" \r\n                ? styles.hiddenForm \r\n                : styles.visibleForm}>\r\n                {resultMsg.length > 0 && resultMsg.map( (msg, i) => \r\n                    <>\r\n                    <p style={{color: resultColor}} key={i}>{msg}</p>\r\n                        <br/>\r\n                    </>\r\n                )}\r\n            </div>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        userName: state.userName,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(TypeFasterMaster);","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport styles from './Games.module.css';\n\nconst LittleBoxes = ({ roomName }) => {\n\n    // a series of divs will show up with random bgColors and textColors\n    // at random setTimeouts, prompt will display a div:\n    // \"click on the { color } box\" while textColor and bgColor are random (to confuse brain processing)\n    // players will have to click on the appropriate div\n    // once a player clicks the right div they get the points\n    // then the next prompt and set of divs will appear\n\n    return (\n        <>\n        <div className={styles.entirePage}>\n            <h2 className={styles.textWhite}> Little Boxes </h2>\n        </div>\n        </>\n    );\n};\n\nfunction mapStateToProps(state) {\n    return {\n        socket: state.socket,\n        userName: state.userName,\n        userScore: state.userScore\n    };\n};\n\nexport default connect(mapStateToProps)(LittleBoxes);","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport styles from './Games.module.css';\n\nconst DontComeInsideMe = ({ roomName }) => {\n\n    // at random setTimeout, prompt will shout \"Come to me!\"\n    // bar will display with a target line towards the end of the bar, with a red forbidden area\n    // aiming bar will move at random speeds\n    // player must click button before the aiming line passes the target line\n    // player who gets closest to the target line without passing into the red area gets the points\n\n    return (\n        <>\n        <div className={styles.entirePage}>\n            <h2 className={styles.textWhite}>Don't Come Inside Me!</h2>\n        </div>\n        </>\n    );\n};\nfunction mapStateToProps(state) {\n    return {\n        userName: state.userName,\n    };\n};\n\nexport default connect(mapStateToProps)(DontComeInsideMe);","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport styles from './Games.module.css';\n\nconst DropAFatShot = ({ roomName }) => {\n\n    // have a static target of a specific size\n    // each player gets a turn;\n    // each player clicks and drags a start point and end point, drawing a line\n    // the shot travels in the same line as the one drawn\n    // as the bullet travels across the target, it covers a certain surface area\n    // whosever bullet covers the most surface area is the winner\n\n    return (\n        <>\n        <div className={styles.entirePage}>\n            <h2 className={styles.textWhite}> Drop a Fat Shot </h2>\n        </div>\n        </>\n    );\n};\n\nfunction mapStateToProps(state) {\n    return {\n        userName: state.userName,\n    };\n};\n\nexport default connect(mapStateToProps)(DropAFatShot);","import React, { useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { navigate, Router } from '@reach/router';\r\nimport { connect } from 'react-redux';\r\n\r\n// [ COMPONENTS ]\r\nimport NavBar from \"../components/NavBar\";\r\nimport Scoreboard from \"../components/Scoreboard\";\r\nimport GameSelector from \"../components/games/GameSelector\";\r\nimport Chat from '../components/chat/Chat';\r\n\r\n// [ GAMES ]\r\nimport MathHead from '../components/games/MathHead';\r\nimport WiseToMemorize from '../components/games/WiseToMemorize';\r\nimport TypeFasterMaster from '../components/games/TypeFasterMaster';\r\nimport LittleBoxes from '../components/games/LittleBoxes';\r\nimport DontComeInsideMe from '../components/games/DontComeInsideMe';\r\nimport DropAFatShot from '../components/games/DropAFatShot';\r\n\r\n// [ STYLING ]\r\nimport styles from './Views.module.css';\r\nimport gameStyles from '../components/games/Games.module.css';\r\n\r\n// [ ANIMATIONS ]\r\nimport Fade from 'react-reveal';\r\n\r\nconst GameRoom = ({ dispatch, userName, roomName }) => {\r\n    const gameName = \" \";\r\n\r\n    // [ SOCKETS ] CHOOSE ONE: localhost:8000 / deployed\r\n    // const [ socket ] = useState( () => io(':8000') );\r\n    const [ socket ] = useState( () => io() );\r\n\r\n    // ADMIN STATE BOOLEAN\r\n    const [ adminState, setAdminState ] = useState(false);\r\n\r\n    useEffect( () => {\r\n        socket.emit(\"enteredGameRoom\", \r\n            {\r\n                userName,\r\n                roomName,\r\n                gameName,\r\n            }\r\n        );\r\n\r\n        dispatch({\r\n            type: 'SETSOCKET',\r\n            socket,\r\n        });\r\n\r\n        dispatch({\r\n            type: 'SETUSERNAME',\r\n            userName,\r\n        });\r\n\r\n        dispatch({\r\n            type: 'SETROOMNAME',\r\n            roomName,\r\n        });\r\n\r\n        dispatch({\r\n            type: 'SETGAMENAME',\r\n            gameName,\r\n        });\r\n\r\n        // will this work?\r\n        // dispatch(\r\n        //     {\r\n        //         type: 'SETSOCKET',\r\n        //         socket,\r\n        //     },\r\n        //     {\r\n        //         type: 'SETUSERNAME',\r\n        //         userName,\r\n        //     },\r\n        //     {\r\n        //         type: 'SETROOMNAME',\r\n        //         roomName,\r\n        //     },\r\n        //     {\r\n        //         type: 'SETGAMENAME',\r\n        //         gameName,\r\n        //     },\r\n        // );\r\n\r\n    }, [] );\r\n\r\n    useEffect( () => {\r\n        if( userName === null || \r\n            userName.length < 1 || \r\n            userName === undefined || \r\n            roomName === null || \r\n            roomName.length < 1 || \r\n            roomName === undefined ) {\r\n            \r\n            navigate('/');\r\n        };\r\n        \r\n        // socket.emit(\"join room\", {\r\n        //     userName,\r\n        //     roomName\r\n        // })\r\n\r\n        socket.emit(\"chatLogUpdate\",\r\n            {\r\n                userName,\r\n                roomName,\r\n            }\r\n        );\r\n\r\n        socket.emit(\"scoreboardUpdate\", \r\n            { \r\n                userName,\r\n                roomName,\r\n            }\r\n        );\r\n\r\n        socket.on(\"syncNewUser\", currentGame => {\r\n            navigate(\"/\"+roomName+\"/\"+currentGame);\r\n        });\r\n        \r\n        socket.on(\"partyNavigator\", data => {\r\n            navigate('/'+data.roomName+'/'+data.gameName);\r\n        });\r\n\r\n        return () => {\r\n            socket.disconnect();\r\n        };\r\n    }, [socket, userName, roomName]);\r\n\r\n    return (\r\n        <>\r\n        <Fade top big>\r\n        <NavBar socket={socket} \r\n            roomName={roomName} />\r\n        <Scoreboard socket={socket}\r\n            roomName={roomName}\r\n            userName={userName} />\r\n        <div className={styles.contentRow}>\r\n            <div className={gameStyles.gameComponent}>\r\n                <Router>\r\n                    <GameSelector path=\"/\" \r\n                        socket={socket} \r\n                        roomName={roomName} />\r\n                    <MathHead path=\"/mathhead\" \r\n                        socket={socket} \r\n                        roomName={roomName} />\r\n                    <TypeFasterMaster path=\"/typefastermaster\" \r\n                        socket={socket} \r\n                        roomName={roomName} />\r\n                    <WiseToMemorize path=\"/wisetomemorize\" \r\n                        socket={socket} \r\n                        roomName={roomName} />\r\n                    <LittleBoxes path=\"/littleboxes\" \r\n                        socket={socket} \r\n                        roomName={roomName} />\r\n                    <DontComeInsideMe path=\"/dontcomeinsideme\" \r\n                        socket={socket} \r\n                        roomName={roomName} />\r\n                    <DropAFatShot path=\"/dropafatshot\" \r\n                        socket={socket} \r\n                        roomName={roomName} />\r\n                </Router>\r\n            </div>\r\n            <>\r\n            <Chat socket={socket} \r\n                roomName = {roomName} />\r\n            </>\r\n        </div>\r\n        </Fade>\r\n        </>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        userName: state.userName,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(GameRoom);\r\n\r\n","// [MAIN COMPONENTS]\r\nimport React, { useState } from 'react';\r\nimport { navigate } from '@reach/router';\r\nimport { connect } from 'react-redux';\r\n\r\n// [STYLES]\r\nimport styles from './Views.module.css';\r\n\r\n//[Material -UI]\r\nimport {\r\n    fade,\r\n    ThemeProvider,\r\n    withStyles,\r\n    makeStyles,\r\n    createMuiTheme,\r\n  } from '@material-ui/core/styles';\r\n  import TextField from '@material-ui/core/TextField';\r\n\r\n//[ ANIMATION]\r\nimport {Fade} from 'react-reveal';\r\n\r\n \r\nimport Carousel from 'react-bootstrap/Carousel';\r\n \r\n\r\nconst Lobby = ({ dispatch }) => {\r\n    const [ formState, setFormState ] = useState({\r\n        uName: \"\",\r\n        rName: \"\",\r\n        rPassword: \"\"\r\n    });\r\n    const [ errorMsg, setErrorMsg ] = useState (\"\");\r\n\r\n    const onChangeHandler = e => {\r\n        setFormState({\r\n            ...formState,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n\r\n    const enterRoom = e => {\r\n        e.preventDefault();\r\n        if (formState.uName.length>0 && formState.rName.length>0) {\r\n            dispatch(\r\n                {\r\n                type: 'SETUSERNAME',\r\n                userName: formState.uName,\r\n                }\r\n            );\r\n            dispatch(\r\n                {\r\n                type: 'SETROOMNAME',\r\n                roomName: formState.rName,\r\n                },\r\n            );\r\n            navigate('/'+formState.rName);\r\n        } else {\r\n            setErrorMsg(\"Please enter both a user and room name\");\r\n        };\r\n    }; \r\n\r\n    // in /views/GameRoom.js we will have a list of sockets connected, chatbox, + list of games (later we will add total score for session using state or redux)\r\n\r\n    return (\r\n        <>\r\n        <div className={[styles.textWhite, styles.onlyDiv].join(' ')}>\r\n            <br/>\r\n            <div className={styles.flexColCen}>\r\n            <Carousel>\r\n                <Carousel.Item >\r\n                    <img height=\"420px\" alt=\"minigameparty.gif\" src={require(\"../assets/images/game (1).gif\")}/>\r\n                </Carousel.Item>\r\n                <Carousel.Item>\r\n                    <img height=\"420px\" alt=\"mathhead\" src={require(\"../assets/images/game (2).gif\")}/>\r\n                </Carousel.Item>\r\n                <Carousel.Item>\r\n                    <img height=\"420px\" alt=\"typefastermaster\" src={require(\"../assets/images/game (3).gif\")}/>\r\n                </Carousel.Item>\r\n            </Carousel>\r\n            <br/>\r\n            <br/>\r\n            </div>\r\n\r\n            <div className={[styles.textWhite, styles.onlyDiv, styles.flexColCen].join(' ')}>\r\n            <h1>Join the Party, Join the Fun!</h1>\r\n\r\n                <br/>\r\n            <p className={styles.textRed}>Please enter your desired nick name and room you wish to enter or create</p> \r\n                <br/> <br/>\r\n            <form className={styles.flexColCen} onSubmit={enterRoom}>\r\n\r\n                <p style={{color: \"red\"}}>{errorMsg}</p>\r\n\r\n                <div className={styles.inputRow}>\r\n                    <label>Nick Name: </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"uName\"\r\n                        value={formState.uName}\r\n                        onChange={onChangeHandler} /> \r\n                </div> \r\n                    <br/>\r\n                <div className={styles.inputRow}>\r\n                    <label>Room Name:</label>\r\n                    <input \r\n                        type=\"text\"\r\n                        name=\"rName\"\r\n                        value={formState.rName}\r\n                        onChange={onChangeHandler} /> \r\n                </div> \r\n                    <br/>\r\n                <div className={styles.inputRow}>\r\n                    <label>Password:</label>\r\n                    <input \r\n                        type=\"password\"\r\n                        name=\"rPassword\"\r\n                        value={formState.rPassword}\r\n                        onChange={onChangeHandler} />\r\n                </div> \r\n                    <br/>\r\n                <div className={styles.buttonRow}>\r\n                    <button \r\n                        type=\"submit\" \r\n                        name =\"roomButton\" \r\n                        value=\"enterRoom\" \r\n                        className={styles.prettyBtn}>\r\n                            Enter Room\r\n                    </button>\r\n                    <button \r\n                        type=\"submit\" \r\n                        name =\"roomButton\" \r\n                        value=\"createRoom\" \r\n                        className={styles.prettyBtn}>\r\n                            Create Room\r\n                    </button>\r\n                </div>\r\n            </form>\r\n            </div>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        userName: state.userName,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Lobby);\r\n","import React from 'react';\r\nimport { Router } from '@reach/router';\r\nimport { connect } from 'react-redux';\r\n\r\n// [ STYLES ]\r\nimport './MiniGameApp.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// [ VIEWS ]\r\nimport LoginReg from './views/LoginReg'; // fix later\r\nimport GameRoom from './views/GameRoom';\r\nimport Lobby from './views/Lobby';\r\n\r\n//[BOOtSTRAP]\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction MiniGameApp({ dispatch }) {\r\n\r\n\r\n  return (\r\n    <>\r\n      <Router>\r\n        <Lobby path=\"/\" />\r\n        <GameRoom path=\"/:roomName/*\" />\r\n      </Router>\r\n    </>\r\n  );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n      // userName: state.userName,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(MiniGameApp);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport MiniGameApp from './MiniGameApp';\r\n\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\n// [TOP] [ REDUX ]\r\nfunction reducer( state, action ) {\r\n    switch(action.type) {\r\n        case 'SETSOCKET':\r\n            return {\r\n            ...state,\r\n            socket: action.socket\r\n            };\r\n        case 'SETUSERNAME':\r\n            return {\r\n            ...state,\r\n            userName: action.userName,\r\n            };\r\n        case 'SETROOMNAME':\r\n            return {\r\n            ...state,\r\n            roomName: action.roomName,\r\n            };\r\n        case 'SETGAMENAME':\r\n            return{\r\n                ...state,\r\n                gameName : action.gameName,\r\n            };\r\n        case 'SETSCOREBOARD':\r\n            return{\r\n                ...state,\r\n                scoreboard : action.scoreboard,\r\n                userList: action.userList,\r\n                scoreList: action.scoreList\r\n            };\r\n        case 'LOGOUT':\r\n            return {\r\n                ...state,\r\n                socket: null,\r\n                userName: null,\r\n            };\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\n    const initialState = {\r\n        socket: null,\r\n        userName: null,\r\n        userScore: null,\r\n        roomName: null,\r\n        gameName : null\r\n    };\r\n  \r\n\r\nconst store = createStore( reducer, initialState );\r\n  // [END] [ REDUX ]\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <MiniGameApp />\r\n    </Provider>\r\n    , document.getElementById('minigameapp')\r\n);\r\n\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginForm\":\"Form_loginForm__1_hPT\",\"formRow\":\"Form_formRow__2fNxM\",\"rowCenter\":\"Form_rowCenter__3mY1B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"flexRow\":\"GlobalComponents_flexRow__22PMv\",\"flexRowCen\":\"GlobalComponents_flexRowCen__3ykpQ\",\"flexColCen\":\"GlobalComponents_flexColCen__5o5C2\",\"textWhite\":\"GlobalComponents_textWhite__T8vzD\",\"sbUser\":\"GlobalComponents_sbUser__2ZlSN\",\"sbScore\":\"GlobalComponents_sbScore__2OL0S\",\"cellWidth\":\"GlobalComponents_cellWidth__1H58r\",\"navButton\":\"GlobalComponents_navButton__25okk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"entirePage\":\"Games_entirePage__1k91F\",\"flexColCen\":\"Games_flexColCen__2ZTuC\",\"flexRowCen\":\"Games_flexRowCen__1NIEg\",\"onlyDiv\":\"Games_onlyDiv__2LRmW\",\"gameComponent\":\"Games_gameComponent__3YsQw\",\"textRed\":\"Games_textRed__3A1qH\",\"textWhite\":\"Games_textWhite__JhkKf\",\"gameBtn\":\"Games_gameBtn__2hB4U\",\"buttonMsg\":\"Games_buttonMsg__3Yh7S\",\"focus\":\"Games_focus__215gg\",\"activeBtn\":\"Games_activeBtn__2khwC\",\"inactiveBtn\":\"Games_inactiveBtn__5g2Jj\",\"createBtn\":\"Games_createBtn__Apku9\",\"hiddenForm\":\"Games_hiddenForm__1_zOw\",\"visibleForm\":\"Games_visibleForm__1Kx5e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatBox\":\"Chat_chatBox__34E6S\",\"chatLogMsgs\":\"Chat_chatLogMsgs__3rYH9\",\"chatFormBox\":\"Chat_chatFormBox__1U2XZ\",\"inputMsg\":\"Chat_inputMsg__2v_c0\",\"msgLog\":\"Chat_msgLog__2BQ30\",\"message\":\"Chat_message__3n5kJ\",\"recievedMessage\":\"Chat_recievedMessage__PJEtb\",\"sentMessage\":\"Chat_sentMessage__1Imme\",\"container\":\"Chat_container__2QJSA\",\"buttonMsg\":\"Chat_buttonMsg__1jyZc\",\"focus\":\"Chat_focus__1vT98\",\"buttonReset\":\"Chat_buttonReset__IldEq\",\"user\":\"Chat_user__2KxPm\"};"],"sourceRoot":""}